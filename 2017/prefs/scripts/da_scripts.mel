/*
The MIT License (MIT)

Copyright (c) 2017 Davide Alidosi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// da_commonObjectOptionsPopup

global proc da_commonObjectOptionsPopup(){

string $panel = `getPanel -wf`;

int $nurbsCurvesCheck = `modelEditor -q -nurbsCurves $panel`;
int $nurbsSurfacesCheck = `modelEditor -q -nurbsSurfaces $panel`;
int $subdivSurfacesCheck = `modelEditor -q -subdivSurfaces $panel`;
int $polymeshesCheck = `modelEditor -q -polymeshes $panel`;
int $lightsCheck = `modelEditor -q -lights $panel`;
int $jointsCheck = `modelEditor -q -joints $panel`;
int $ikHandlesCheck = `modelEditor -q -ikHandles $panel`;
int $deformersCheck = `modelEditor -q -deformers $panel`;
int $locatorsCheck = `modelEditor -q -locators $panel`;

menuItem
    -label "Visibility" 
    -subMenu 1
    -radialPosition "NE" 
	-image "RS_visible.png"
    -sourceType "mel" 
    menuEditorMenuItem5;

    menuItem
        -label "Curves" 
        -command "da_ToggleNurbsCurvesVis" 
		-checkBox (1 == $nurbsCurvesCheck)
        -radialPosition "NE" 
        -sourceType "mel" 
        menuEditorMenuItem1;

    menuItem
        -label "Polygons" 
        -command "da_TogglePolyVis" 
		-checkBox (1 == $polymeshesCheck)
        -radialPosition "N" 
        -sourceType "mel" 
        menuEditorMenuItem3;

    menuItem
        -label "Light" 
        -command "da_ToggleLightVis" 
		-checkBox (1 == $lightsCheck)
        -radialPosition "NW" 
        -sourceType "mel" 
        menuEditorMenuItem4;

    menuItem
        -label "Joint" 
        -command "da_ToggleJointVis" 
		-checkBox (1 == $jointsCheck)
        -radialPosition "SE" 
        -sourceType "mel" 
        menuEditorMenuItem5;

    menuItem
        -label "IK Handle" 
        -command "da_ToggleIkVis" 
		-checkBox (1 == $ikHandlesCheck)
        -radialPosition "S" 
        -sourceType "mel" 
        menuEditorMenuItem6;

    menuItem
        -label "Locator" 
        -command "da_ToggleLocVis" 
		-checkBox (1 == $locatorsCheck)
        -radialPosition "SW" 
        -sourceType "mel" 
        menuEditorMenuItem7;

    menuItem
        -label "Deformers" 
        -command "da_ToggleDefVis" 
		-checkBox (1 == $deformersCheck)
        -radialPosition "W" 
        -sourceType "mel" 
        menuEditorMenuItem8;

    menuItem
        -label "Nurbs" 
        -command "da_ToggleNurbsVis" 
		-checkBox (1 == $nurbsSurfacesCheck)
        -radialPosition "E" 
        -sourceType "mel" 
        menuEditorMenuItem9;

setParent -m ..;
}


// da_curveToPoly

global proc da_curveToPoly(){
	//Main Procedure
	string $renderCurve[] = `ls -sl`;
	ResetTemplateBrush;
	select $renderCurve;
	AttachBrushToCurves;
	string $renderCurveRelatives[] = `listRelatives $renderCurve`;
	string $renderStroke[] = `listConnections -t stroke -sh 1 -d 1 -s 0 $renderCurveRelatives`;
	select $renderStroke;
	doPaintEffectsToPoly( 1,0,1,1,100000);
	hyperShade -assign initialShadingGroup;

	//CTRL Procedure
	string $renderBrush[] = `listConnections -t brush $renderStroke`;
	string $locatorCTRL[] = `CreateLocator`;
	rename $locatorCTRL polyCurveCTRL1;
	string $showCTLR[] = `ls -sl`;
	addAttr -ln "Radius"  -at double  -min 0.001 -dv 0.5 $showCTLR;
	addAttr -ln "Clipping"  -at double  -min 0 -max 1 -dv 1 $showCTLR;
	addAttr -ln "Section"  -at long  -min 3 -max 12 -dv 4 $showCTLR;
	addAttr -ln "Density"  -at double -min 0.001 -max 20 -dv 1 $showCTLR;
	addAttr -ln "PolyLimit"  -at long  -min 1000 -max 1000000 -dv 100000 $showCTLR;
	addAttr -ln "HardEdges"  -at bool;
	setAttr -e-keyable true ($showCTLR[0] + ".Radius");
	setAttr -e-keyable true ($showCTLR[0] + ".Clipping");
	setAttr -e-keyable true ($showCTLR[0] + ".Section");
	setAttr -e-keyable true ($showCTLR[0] + ".Density");
	setAttr -e-keyable true ($showCTLR[0] + ".PolyLimit");
	setAttr -e-keyable true ($showCTLR[0] + ".HardEdges");
	int $numObj = size($renderBrush);
	for($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + ".Radius", $renderBrush[$i] + ".brushWidth");
	for($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + ".Section", $renderBrush[$i] + ".tubeSections");
	int $numObj = size($renderStroke);
	for($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + ".Clipping", $renderStroke[$i] + ".maxClip");
	for($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + ".Density", $renderStroke[$i] + ".sampleDensity");
	for($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + ".PolyLimit", $renderStroke[$i] + ".meshPolyLimit");
	for($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + ".HardEdges", $renderStroke[$i] + ".meshHardEdges");

	//Rig Procedure
	string $renderMesh[] = `listConnections -t mesh $renderStroke`;
	select $renderMesh;
	pickWalk -d up;
	string $groupMesh[] = `ls -sl`;
	parent $groupMesh $showCTLR;
	parent $renderStroke $showCTLR;
	select $showCTLR;

	//Clean Rig
	setAttr -e-keyable false -l true ($showCTLR[0] + ".tx");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".ty");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".tz");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".rx");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".ry");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".rz");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".sx");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".sy");
	setAttr -e-keyable false -l true ($showCTLR[0] + ".sz");
}


// da_interactiveBooleans

global proc da_wireframeTemplate(){
	string $myBoolOperators[] = `ls -sl`;
	string $myBool[] = `listConnections -s 1 -d 0 -sh 1`;
	select $myBool;
	for ($i=0; $i<size($myBool); $i++) {
		setAttr ($myBool[$i] + ".intermediateObject") 0;
		setAttr ($myBool[$i] + ".primaryVisibility") 0;
		setAttr ($myBool[$i] + ".overrideEnabled") 1;
		setAttr ($myBool[$i] + ".overrideShading") 0;
		setAttr ($myBool[$i] + ".visibility") 1;
		setAttr ($myBool[$i] + ".castsShadows") 0;
		setAttr ($myBool[$i] + ".receiveShadows") 0;
		setAttr ($myBool[$i] + ".motionBlur") 0;
		setAttr ($myBool[$i] + ".smoothShading") 0;
		setAttr ($myBool[$i] + ".visibleInReflections") 0;
		setAttr ($myBool[$i] + ".visibleInRefractions") 0;
	}

	showHidden -a;
	select $myBoolOperators;
}

global proc da_wireframeTemplateA(){
	string $myBoolOperators[] = `ls -sl`;
	string $myBool[] = `listConnections -s 1 -d 0 -sh 1`;
	select $myBool;
	for ($i=0; $i<size($myBool); $i++) {
		setAttr ($myBool[1] + ".intermediateObject") 0;
		setAttr ($myBool[1] + ".primaryVisibility") 0;
		setAttr ($myBool[1] + ".overrideEnabled") 1;
		setAttr ($myBool[1] + ".overrideShading") 0;
		setAttr ($myBool[1] + ".visibility") 1;
		setAttr ($myBool[1] + ".castsShadows") 0;
		setAttr ($myBool[1] + ".receiveShadows") 0;
		setAttr ($myBool[1] + ".motionBlur") 0;
		setAttr ($myBool[1] + ".smoothShading") 0;
		setAttr ($myBool[1] + ".visibleInReflections") 0;
		setAttr ($myBool[1] + ".visibleInRefractions") 0;
	}

	showHidden -a;
	select $myBoolOperators;
}

global proc da_wireframeTemplateB(){
	string $myBoolOperators[] = `ls -sl`;
	string $myBool[] = `listConnections -s 1 -d 0 -sh 1`;
	select $myBool;
	for ($i=0; $i<size($myBool); $i++) {
		setAttr ($myBool[0] + ".intermediateObject") 0;
		setAttr ($myBool[0] + ".primaryVisibility") 0;
		setAttr ($myBool[0] + ".overrideEnabled") 1;
		setAttr ($myBool[0] + ".overrideShading") 0;
		setAttr ($myBool[0] + ".visibility") 1;
		setAttr ($myBool[0] + ".castsShadows") 0;
		setAttr ($myBool[0] + ".receiveShadows") 0;
		setAttr ($myBool[0] + ".motionBlur") 0;
		setAttr ($myBool[0] + ".smoothShading") 0;
		setAttr ($myBool[0] + ".visibleInReflections") 0;
		setAttr ($myBool[0] + ".visibleInRefractions") 0;
	}

	showHidden -a;
	select $myBoolOperators;
}

global proc da_interactiveUnion(){
	PolygonBooleanUnion;
	da_wireframeTemplate;
}

global proc da_interactiveDifference(){
	PolygonBooleanDifference;
	da_wireframeTemplate;
}

global proc da_interactiveIntersection(){
	PolygonBooleanIntersection;
	da_wireframeTemplate;
}


// da_intPlay

global proc da_intPlay(){
    string $ctrlUI;
    string $ctrlUI_controlName;
    string $command;
    string $layout;
    $command = "InteractivePlayback;";

    $ctrlsUI = `lsUI -type control MayaWindow`;
    for ($ctrlUI in $ctrlsUI)
    {
        if ((`match "symbolButton" $ctrlUI`) == "symbolButton")
            if (`symbolButton -q -c $ctrlUI`=="playButtonBackward")
            {
                $layout = `symbolButton -q -p $ctrlUI`;
                
                // store the current name of the control
                $ctrlUI_controlName = $ctrlUI;
                
                deleteUI $ctrlUI;
                $stepBtn = `symbolButton -p $layout -image "da_interactivePlayback.png" -c $command -ann "Interactive Playback. Pressing the ESC key will stop playback." stepBtn`;
            }
    }
    
    $ctrlsUI = `lsUI -type control MayaWindow`;
    for ($ctrlUI in $ctrlsUI)
    {
        if ((`match "symbolButton" $ctrlUI`) == "symbolButton")
            if (`symbolButton -q -c $ctrlUI`=="playButtonForward")
                symbolButton -e -c "play -state (!`play -q -state`);" $ctrlUI;
    }    
    
    // add a column to the timeSlider layout and recreate the play backwards button
    gridLayout -e -nc (`gridLayout -q -nc $layout` + 1) $layout;
    symbolButton -m 0 -p $layout $ctrlUI_controlName;
}


// da_nParticleConverter

global proc da_convertToThickCloud(){
    pickWalkDown;
    string $mySel[] = `ls -sl`;
    for($i=0;$i<size($mySel);$i++){
    applyPresetToNode $mySel[$i] "" "" "da_ThickCloud" 1;
	pickWalkUp;
    }
}

global proc da_convertToWater(){
    pickWalkDown;
    string $mySel[] = `ls -sl`;
    for($i=0;$i<size($mySel);$i++){
    applyPresetToNode $mySel[$i] "" "" "da_Water" 1;
	pickWalkUp;
    }
}

global proc da_convertToCloud(){
    pickWalkDown;
    string $mySel[] = `ls -sl`;
    for($i=0;$i<size($mySel);$i++){
    applyPresetToNode $mySel[$i] "" "" "da_Cloud" 1;
	pickWalkUp;
    }
}

global proc da_convertToBalls(){
    pickWalkDown;
    string $mySel[] = `ls -sl`;
    for($i=0;$i<size($mySel);$i++){
    applyPresetToNode $mySel[$i] "" "" "da_Balls" 1;
	pickWalkUp;
    }
}

global proc da_convertToPoint(){
    pickWalkDown;
    string $mySel[] = `ls -sl`;
    for($i=0;$i<size($mySel);$i++){
    applyPresetToNode $mySel[$i] "" "" "da_Point" 1;
	pickWalkUp;
    }
}


// da_perspToggle

global proc da_perspToggle(){
	string $curPanel;
	string $curCam;
	int $orthoValue;
	float $camRot[];
	float $camRotTemp;
	int $intOfTemp;
	float $rotOver;
	float $camRotFixed[2];

	$curPanel = `getPanel -wf`;
	$curCam = `modelPanel -q -cam $curPanel`;
	$orthoValue = `camera -q -o $curCam`;

	if ($orthoValue == 1){
		setAttr ($curCam +".orthographic") 0;
		da_PasteCameraPosition;

		inViewMessage -pos topCenter -msg "Perspective View" -fade;
		
	} else {

		da_CopyCameraPosition;
	
		$camRot = `camera -q -rot $curCam`;

		for ($i=0; $i < 2; $i++){
		
			$camRotTemp = $camRot[$i] / 360;
			$intOfTemp = (int)$camRotTemp;
			$rotOver = 360 * $intOfTemp;
			$camRotFixed[$i] = $camRot[$i] - $rotOver;
		}

		for ($i=0; $i < 2; $i++){
			if ($camRotFixed[$i] < 0)
				$camRotFixed[$i] += 360;
		}

		if ($camRotFixed[0] >= 45 && $camRotFixed[0] < 135){
			viewSet -bo;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Bottom position - Orthographic View" -fade;
		}

		else if ($camRotFixed[0] >= 225 && $camRotFixed[0] < 315){
			viewSet -t;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Top position - Orthographic View" -fade;
		}

		else if ($camRotFixed[1] < 45){
			viewSet -f;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Front position - Orthographic View" -fade;
		}

		else if ($camRotFixed[1] >= 315 ){
			viewSet -f;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Front position - Orthographic View" -fade;
		}

		else if ($camRotFixed[1] >= 45 && $camRotFixed[1] < 135)
		{
			viewSet -rs;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Right position - Orthographic View" -fade;
		}

		else if ($camRotFixed[1] >= 135 && $camRotFixed[1] < 225)
		{
			viewSet -b;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Back position - Orthographic View" -fade;
		}

		else if ($camRotFixed[1] >= 225 && $camRotFixed[1] < 315)
		{
			viewSet -ls;
			viewFit -f 0.5;
			inViewMessage -pos topCenter -msg "Left position - Orthographic View" -fade;
		}
	}
}


// da_shell

global proc da_shell(){
	string $myTransform[] = `ls -sl -typ "transform"`;
	string $myShape[] = `listRelatives -s`;
	catchQuiet (`duplicate`);
	string $myShell[] = `listRelatives -s`;
	connectAttr -f ($myShape[0] + ".outMesh") ($myShell[0] + ".inMesh");
	
	string $myShellTransform[] = `listRelatives -p $myShell`;
	select $myShellTransform;
	da_ResetTweakPoint;
	dR_modeObject;
	
	polyNormal -normalMode 0 -userNormalMode 0 -ch 1 $myShell;
	polyExtrudeFacet -tk 1;
	select $myShell;
	string $myPolyExtrudeFace[] = `listConnections -s 1 -d 0 -t "polyExtrudeFace"`;
	polyBevel3 -f 0.1 -oaf 1 -af 1 -d 1 -m 0 -mia 0 -c 1 -sg 1 -ws 1 -sa 30 -sn 1 -mv 1 -mvt 0.0001 -ma 180 -at 180 -ch 1;
	string $myPolyBevel[] = `listConnections -s 1 -d 0 -t "polyBevel3"`;

	setAttr ($myShell[0] +".overrideEnabled") 1;
	setAttr ($myShell[0] +".overrideDisplayType") 2;

	setAttr ($myShape[0] + ".primaryVisibility") 0;
	setAttr ($myShape[0] + ".overrideEnabled") 1;
	setAttr ($myShape[0] + ".overrideShading") 0;
	setAttr ($myShape[0] + ".visibility") 1;
	setAttr ($myShape[0] + ".castsShadows") 0;
	setAttr ($myShape[0] + ".receiveShadows") 0;
	setAttr ($myShape[0] + ".motionBlur") 0;
	setAttr ($myShape[0] + ".smoothShading") 0;
	setAttr ($myShape[0] + ".visibleInReflections") 0;
	setAttr ($myShape[0] + ".visibleInRefractions") 0;

	addAttr -ln "Thickness"  -at double  -min 0.001 -dv 1 $myTransform;
	addAttr -ln "Bevel"  -at "enum" -en "On:Off:" $myTransform;
	addAttr -ln "Chamfer"  -at bool $myTransform;
	addAttr -ln "Offset"  -at double  -min 0.001 -dv 0.1 $myTransform;
	addAttr -ln "Segments"  -at long  -min 1 -dv 1 $myTransform;
	setAttr -e-keyable true ($myTransform[0] + ".Thickness");
	setAttr -e-keyable true ($myTransform[0] + ".Bevel");
	setAttr -e-keyable true ($myTransform[0] + ".Chamfer") 1;
	setAttr -e-keyable true ($myTransform[0] + ".Offset");
	setAttr -e-keyable true ($myTransform[0] + ".Segments");

	connectAttr -f ($myTransform[0] + ".Thickness") ($myPolyExtrudeFace[0] + ".thickness");
	connectAttr -f ($myTransform[0] + ".Offset") ($myPolyBevel[0] + ".offset");
	connectAttr -f ($myTransform[0] + ".Segments") ($myPolyBevel[0] + ".segments");
	connectAttr -f ($myTransform[0] + ".Chamfer") ($myPolyBevel[0] + ".chamfer");
	connectAttr -f ($myTransform[0] + ".Bevel") ($myPolyBevel[0] + ".nodeState");
	
	select $myShell;
	pickWalk -d up;
	rename da_shell1;

	select $myTransform;
	rename da_shellBase1;
}

global proc da_shellDetach(){
	da_BackToObjectMode;

    string $myTransform[] = `ls -sl -typ "transform"`;
	string $myShape[] = `listRelatives -s`;

	setAttr ($myShape[0] + ".primaryVisibility") 1;
	setAttr ($myShape[0] + ".overrideEnabled") 0;
	setAttr ($myShape[0] + ".overrideShading") 1;
	setAttr ($myShape[0] + ".visibility") 1;
	setAttr ($myShape[0] + ".castsShadows") 1;
	setAttr ($myShape[0] + ".receiveShadows") 1;
	setAttr ($myShape[0] + ".motionBlur") 1;
	setAttr ($myShape[0] + ".smoothShading") 1;
	setAttr ($myShape[0] + ".visibleInReflections") 1;
	setAttr ($myShape[0] + ".visibleInRefractions") 1;

	string $myPolyBevel[] = `listConnections -s 0 -d 1 -t "polyBevel3"`;
	select $myPolyBevel[0];
	string $myShell[] = `listConnections -sh 1 -s 0 -d 1`;

	setAttr ($myShell[0] +".overrideEnabled") 1;
	setAttr ($myShell[0] +".overrideDisplayType") 0;
	
	deleteAttr ($myTransform[0] + ".Thickness");
	deleteAttr ($myTransform[0] + ".Bevel");
	deleteAttr ($myTransform[0] + ".Chamfer");
	deleteAttr ($myTransform[0] + ".Offset");
	deleteAttr ($myTransform[0] + ".Segments");

	select $myShape;
	pickWalk -d up;
	rename da_exShellBase1;

	select $myShell;
	pickWalk -d up;
	rename da_extractShell1;
	ClearFreeze;
}

global proc da_shellSubdiv(){
    string $myTransform[] = `ls -sl -typ "transform"`;
	string $myPolyBevel[] = `listConnections -s 0 -d 1 -t "polyBevel3"`;
	select $myPolyBevel[0];
	string $myShell[] = `listConnections -sh 1 -s 0 -d 1`;
	
	select $myShell;
    HighQualityDisplay;
    
    select $myTransform;
}

global proc da_shellNoSubdiv(){
    string $myTransform[] = `ls -sl -typ "transform"`;
	string $myPolyBevel[] = `listConnections -s 0 -d 1 -t "polyBevel3"`;
	select $myPolyBevel[0];
	string $myShell[] = `listConnections -sh 1 -s 0 -d 1`;
	
	select $myShell;
    LowQualityDisplay;
    
    select $myTransform;
}


// da_XGenBrushMangement

global proc da_XGenBrushMangement_MirrorOff(){

	string $CheckTool = `currentCtx`;

	if ($CheckTool == "xgmDensityBrushTool")
		xgmDensityBrushContext -e -bst 0 `currentCtx`;

	else if ($CheckTool == "xgmPlaceBrushTool")
		xgmPlaceBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmLengthBrushTool")
		xgmLengthBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmCutBrushTool")
		xgmCutBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmWidthBrushTool")
		xgmWidthBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmDirectionBrushTool")
		xgmDirectionBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmCombBrushTool")
		xgmCombBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmGrabBrushTool")
		xgmGrabBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmSmoothBrushTool")
		xgmSmoothBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmNoiseBrushTool")
		xgmNoiseBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmClumpBrushTool")
		xgmClumpBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmPartBrushTool")
		xgmPartBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmFreezeBrushTool")
		xgmFreezeBrushContext -e -bst 0 `currentCtx`;
		
	else if ($CheckTool == "xgmSelectBrushTool")
		xgmSelectBrushContext -e -bst 0 `currentCtx`;
		
	else
		print "Brush not supported";
}

global proc da_XGenBrushMangement_MirrorX(){

	string $CheckTool = `currentCtx`;

	if ($CheckTool == "xgmDensityBrushTool")
		xgmDensityBrushContext -e -bst 1 `currentCtx`;

	else if ($CheckTool == "xgmPlaceBrushTool")
		xgmPlaceBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmLengthBrushTool")
		xgmLengthBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmCutBrushTool")
		xgmCutBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmWidthBrushTool")
		xgmWidthBrushContext -e -bst 1 `currentCtx`;

	else if ($CheckTool == "xgmDirectionBrushTool")
		xgmDirectionBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmCombBrushTool")
		xgmCombBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmGrabBrushTool")
		xgmGrabBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmSmoothBrushTool")
		xgmSmoothBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmNoiseBrushTool")
		xgmNoiseBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmClumpBrushTool")
		xgmClumpBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmPartBrushTool")
		xgmPartBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmFreezeBrushTool")
		xgmFreezeBrushContext -e -bst 1 `currentCtx`;
		
	else if ($CheckTool == "xgmSelectBrushTool")
		xgmSelectBrushContext -e -bst 1 `currentCtx`;
		
	else
		print "Brush not supported";
}

global proc da_XGenBrushMangement_MirrorY(){

	string $CheckTool = `currentCtx`;

	if ($CheckTool == "xgmDensityBrushTool")
		xgmDensityBrushContext -e -bst 2 `currentCtx`;

	else if ($CheckTool == "xgmPlaceBrushTool")
		xgmPlaceBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmLengthBrushTool")
		xgmLengthBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmCutBrushTool")
		xgmCutBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmWidthBrushTool")
		xgmWidthBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmDirectionBrushTool")
		xgmDirectionBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmCombBrushTool")
		xgmCombBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmGrabBrushTool")
		xgmGrabBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmSmoothBrushTool")
		xgmSmoothBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmNoiseBrushTool")
		xgmNoiseBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmClumpBrushTool")
		xgmClumpBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmPartBrushTool")
		xgmPartBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmFreezeBrushTool")
		xgmFreezeBrushContext -e -bst 2 `currentCtx`;
		
	else if ($CheckTool == "xgmSelectBrushTool")
		xgmSelectBrushContext -e -bst 2 `currentCtx`;
		
	else
		print "Brush not supported";
}

global proc da_XGenBrushMangement_MirrorZ(){

	string $CheckTool = `currentCtx`;

	if ($CheckTool == "xgmDensityBrushTool")
		xgmDensityBrushContext -e -bst 3 `currentCtx`;

	else if ($CheckTool == "xgmPlaceBrushTool")
		xgmPlaceBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmLengthBrushTool")
		xgmLengthBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmCutBrushTool")
		xgmCutBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmWidthBrushTool")
		xgmWidthBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmDirectionBrushTool")
		xgmDirectionBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmCombBrushTool")
		xgmCombBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmGrabBrushTool")
		xgmGrabBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmSmoothBrushTool")
		xgmSmoothBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmNoiseBrushTool")
		xgmNoiseBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmClumpBrushTool")
		xgmClumpBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmPartBrushTool")
		xgmPartBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmFreezeBrushTool")
		xgmFreezeBrushContext -e -bst 3 `currentCtx`;
		
	else if ($CheckTool == "xgmSelectBrushTool")
		xgmSelectBrushContext -e -bst 3 `currentCtx`;
		
	else
		print "Brush not supported";
}

global proc da_XGenBrushMangement_CollisionOn(){

	string $CheckTool = `currentCtx`;

	if ($CheckTool == "xgmDensityBrushTool")
		xgmDensityBrushContext -e -ec 1`currentCtx`;

	else if ($CheckTool == "xgmPlaceBrushTool")
		xgmPlaceBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmLengthBrushTool")
		xgmLengthBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmCutBrushTool")
		xgmCutBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmWidthBrushTool")
		xgmWidthBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmDirectionBrushTool")
		xgmDirectionBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmCombBrushTool")
		xgmCombBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmGrabBrushTool")
		xgmGrabBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmSmoothBrushTool")
		xgmSmoothBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmNoiseBrushTool")
		xgmNoiseBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmClumpBrushTool")
		xgmClumpBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmPartBrushTool")
		xgmPartBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmFreezeBrushTool")
		xgmFreezeBrushContext -e -ec 1 `currentCtx`;
		
	else if ($CheckTool == "xgmSelectBrushTool")
		xgmSelectBrushContext -e -ec 1 `currentCtx`;
		
	else
		print "Brush not supported";
}

global proc da_XGenBrushMangement_CollisionOff(){

	string $CheckTool = `currentCtx`;

	if ($CheckTool == "xgmDensityBrushTool")
		xgmDensityBrushContext -e -ec 0`currentCtx`;

	else if ($CheckTool == "xgmPlaceBrushTool")
		xgmPlaceBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmLengthBrushTool")
		xgmLengthBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmCutBrushTool")
		xgmCutBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmWidthBrushTool")
		xgmWidthBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmDirectionBrushTool")
		xgmDirectionBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmCombBrushTool")
		xgmCombBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmGrabBrushTool")
		xgmGrabBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmSmoothBrushTool")
		xgmSmoothBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmNoiseBrushTool")
		xgmNoiseBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmClumpBrushTool")
		xgmClumpBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmPartBrushTool")
		xgmPartBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmFreezeBrushTool")
		xgmFreezeBrushContext -e -ec 0 `currentCtx`;
		
	else if ($CheckTool == "xgmSelectBrushTool")
		xgmSelectBrushContext -e -ec 0 `currentCtx`;
		
	else
		print "Brush not supported";
}