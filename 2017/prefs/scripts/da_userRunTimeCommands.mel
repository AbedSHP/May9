/*
The MIT License (MIT)

Copyright (c) 2017 Davide Alidosi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

runTimeCommand
	-annotation "Cleare History end Freeze Transformation"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("delete -ch;\nFreezeTransformations;")
	da_ClearFreeze;

runTimeCommand
	-annotation "Color Management On"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("colorManagementPrefs -e -cme 1;")
	da_ColorManagementOn;

runTimeCommand
	-annotation "Color Management Off"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("colorManagementPrefs -e -cme 0;")
	da_ColorManagementOff;

runTimeCommand
	-annotation "Enable Outliner in layout"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ToggleOutliner")
	da_LayoutOutliner;

runTimeCommand
	-annotation "Open AE to Last Operation"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $his[] = `listHistory -leaf true`; \nif( size($his)>1 ){\nshowEditorExact($his[1]);\n}\nelse{\nerror \"can't find last operator in stack.\";\n}")
	da_LastOpInStack;

runTimeCommand
	-annotation "Set Object Mode"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("SelectToggleMode;\ntoggleSelMode;")
	da_SetObjectMode;

runTimeCommand
	-annotation "Recreate the persp camera if needed"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $camera = findStartUpCamera( \"persp\" );\nstring $camera2[] = `camera -n persp -hc \"viewSet -p %camera\"`;\n\ncamera -e -sc 0 $camera; delete \"persp\";\nrename $camera2[0] \"persp\";\ncamera -e -sc 1 \"persp\";")
	da_ClearPersp;

runTimeCommand
	-annotation "Reset UI in case of failure"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`window -exists unifiedRenderGlobalsWindow`)\n\t{deleteUI unifiedRenderGlobalsWindow;}\nelse\n\t{print \"\";};\nbuildNewSceneUI;")
	da_ResetUI;

runTimeCommand
	-annotation "Toggle Component Object Mode"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("toggleSelMode; \nselectType -smp 0 -sme 0 -smf 0 -smu 0 -pv 0 -pe 0 -pf 0 -puv 0 -meshComponents 1;")
	da_ToggleComponentMode;

runTimeCommand
	-annotation "Toggle UV and Object Mode"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$mySel=`ls -sl -fl`;\n\nif (size(`filterExpand -sm 24 $mySel`)!=0 || size(`filterExpand -sm 73 $mySel`)!=0)\n    dR_modeObject;\nelse\n    dR_modeUV;\n")
	da_ToggleUV;

runTimeCommand
	-annotation "Toggle Color Management On and Off"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $cmStatus = `colorManagementPrefs -q -cme`;\n\nif ($cmStatus == 0)\n{\n\tda_ColorManagementOn;\n\tinViewMessage -pos topCenter -msg \"Color Management on\" -fade;\n}\nelse\n{\n\tda_ColorManagementOff;\n\tinViewMessage -pos topCenter -msg \"Color Management off\" -fade;\n}")
	da_ToggleColorManagement;

runTimeCommand
	-annotation "Toggle Ramp Visibility in Paint Skin Tool"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $currentTool = `currentCtx`;\nint $rampTypeCheck = `artAttrCtx -q -useColorRamp $currentTool`;\n\nif ($rampTypeCheck == 1){\n\tartAttrCtx -e -useColorRamp 0 $currentTool;\n}else{\n\tartAttrCtx -e -useColorRamp 1 $currentTool;\n}")
	da_ToggleRampSkin;

runTimeCommand
	-annotation "Toggle Xray Joints in Paint Skin Tool"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $currentTool = `currentCtx`;\nint $xrayCheck = `artAttrSkinPaintCtx -q -xrayJoints $currentTool`;\n\nif ($xrayCheck == 1){\n\tartAttrSkinPaintCtx -e -xrayJoints 0 $currentTool;\n}else{\n\tartAttrSkinPaintCtx -e -xrayJoints 1 $currentTool;\n}")
	da_ToggleXRayJointsSkin;

runTimeCommand
	-annotation "Toggle Wireframe on Saded"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $selectedPanel = `getPanel -wf`;\nint $shadedWireState = `modelEditor -q -wos $selectedPanel`;\nif(`modelEditor -ex $selectedPanel`)\n{\n    setWireframeOnShadedOption (!$shadedWireState) $selectedPanel;\n}")
	da_ToggleWireOnShade;

runTimeCommand
	-annotation "Toggle DAG Node in Outliner"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $DAGCheck = `outlinerEditor -q -dag outlinerPanel1`;\n\nif ($DAGCheck == 1)\n\toutlinerEditor -edit -dag false outlinerPanel1;\nelse\n\toutlinerEditor -edit -dag true outlinerPanel1;")
	da_ToggleDagNode;

runTimeCommand
	-annotation "Toggle Material Node in Outliner"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $MaterialCheck = `outlinerEditor -q -sam outlinerPanel1`;\n\nif ($MaterialCheck == 1)\n\toutlinerEditor -edit -sam false outlinerPanel1;\nelse\n\toutlinerEditor -edit -sam true outlinerPanel1;")
	da_ToggleMaterial;

runTimeCommand
	-annotation "Toggle Shapes Node in Outliner"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $MaterialCheck = `outlinerEditor -q -shp outlinerPanel1`;\n\nif ($MaterialCheck == 1)\n\toutlinerEditor -edit -shp false outlinerPanel1;\nelse\n\toutlinerEditor -edit -shp true outlinerPanel1;")
	da_ToggleShapes;

runTimeCommand
	-annotation "Expand Shade Network"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("hyperShadePanelGraphCommand(\"hyperShadePanel1\", \"showUpAndDownstream\")")
	da_ExpandShade;

runTimeCommand
	-annotation "Create a Flatten Surface From Curves"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("bevelPlus -po 1 -ns 1 -cap 2 -pom 2 -ed 0 -ch 1;\npolyMergeVertex  -d 0.0001 -am 1 -ch 1;\nSelectToggleMode;\ntoggleSelMode;")
	da_FlattenSurface;

runTimeCommand
	-annotation "Revert the current scene at last save"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $test = `file -q -sn`;\n\nif (size($test)){\n\tstring $myResult = `confirmDialog -title \"Confirm\" -message \"Revert to Saved?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n\tstring $currentScenePath = `file -q -sn`;\n\tfile -f -open $currentScenePath;\n\tinViewMessage -pos topCenter -msg \"Revert to Saved\" -fade;\n\t}\n\telse inViewMessage -pos topCenter -msg \"Revert cancelled\" -fade;\n}\n\nelse{\n\tconfirmDialog -title \"Untitled scene\" -message \"Is not possible revert untitled scene.\"\n\t-button \"OK\" -defaultButton \"OK\";\n}")
	da_RevertToSave;

runTimeCommand
	-annotation "Set Adaptive OpenSubdiv as Subdivision"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".useGlobalSmoothDrawType\") 0;\nsetAttr ($each +\".smoothDrawType\") 3;\nsetAttr ($each +\".smoothTessLevel\") 6;\nsetAttr ($each +\".showDisplacements\") 0;\nsetDisplaySmoothness 3;\n}\ninViewMessage -pos topCenter -msg \"Adaptive OpenSubdiv enable on selectet object(s)\" -fade;")
	da_OpenSubdAdapt;

runTimeCommand
	-annotation "Set OpenSubdiv as Subdivision"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".useGlobalSmoothDrawType\") 0;\nsetAttr ($each +\".smoothDrawType\") 2;\n}\ninViewMessage -pos topCenter -msg \"Adaptive OpenSubdiv disable on selectet object(s)\" -fade;")
	da_OpenSubdNoAdapt;

runTimeCommand
	-annotation "Enable Open Subdiv Display Subdivision"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".displaySubdComps\") 1;\n}\ninViewMessage -pos topCenter -msg \"Display Subdivisions enable on selectet object(s)\" -fade;")
	da_OpenSubdSudivision;

runTimeCommand
	-annotation "Disable Open Subdiv Display Subdivision"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".displaySubdComps\") 0;\n}\ninViewMessage -pos topCenter -msg \"Display Subdivisions disable on selectet object(s)\" -fade;")
	da_OpenSubdNoSubdivision;

runTimeCommand
	-annotation "Enable OpenCL on OpenSubd"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".enableOpenCL\") 1;\n}\ninViewMessage -pos topCenter -msg \"OpenCL enable on selectet object(s)\" -fade;")
	da_OpenSubdCL;

runTimeCommand
	-annotation "Disable OpenCL on OpenSubd"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".enableOpenCL\") 0;\n}\ninViewMessage -pos topCenter -msg \"OpenCL disable on selectet object(s)\" -fade;")
	da_OpenSubdNoCL;

runTimeCommand
	-annotation "Enable OpenSubd Displace"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".useGlobalSmoothDrawType\") 0;\nsetAttr ($each +\".smoothDrawType\") 3;\nsetAttr ($each +\".smoothTessLevel\") 6;\nsetAttr ($each +\".showDisplacements\") 1;\nsetDisplaySmoothness 3;\n}\ninViewMessage -pos topCenter -msg \"OpenSubdiv displace enable on selected object(s)\" -fade;")
	da_OpenSubdDisplace;

runTimeCommand
	-annotation "Disable OpenSubd Displace"
	-category "Custom Scripts.May9_Pro.Subdivision"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".useGlobalSmoothDrawType\") 0;\nsetAttr ($each +\".smoothDrawType\") 2;\nsetAttr ($each +\".showDisplacements\") 0;\n}\ninViewMessage -pos topCenter -msg \"OpenSubdiv displace disable on selected object(s)\" -fade;")
	da_OpenSubdNoDisplace;

runTimeCommand
	-annotation "Set MM based on cursor position"
	-category "Custom Scripts.May9_Pro.MMtoKey"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("MMtoKey.ui()")
	da_MMtoKeyManager;

runTimeCommand
	-annotation "Add Divisions to Polygonal Object"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("Triangulate;\npolyQuad  -a 47 -kgb 0 -ktb 0 -khe 0 -ws 0 -ch 1")
	da_PolyDivision;

runTimeCommand
	-annotation "Select Object by Material"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nhyperShade -objects $mySel")
	da_SelectObjectMaterial;

runTimeCommand
	-annotation "Select Current Camera"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $camera;\nstring $panel = `getPanel -wf`;\nif ( \"modelPanel\" == `getPanel -to $panel` )\n  {\n    $camera = `modelEditor -q -camera $panel`;\n  }\nselect $camera;")
	da_SelectCamera;

runTimeCommand
	-annotation "Look Through Selected"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$currentPanel = `getPanel -withFocus`; \n$panelType = `getPanel -to $currentPanel`;\n$selObj = `ls -sl -l`;\nif ($panelType == \"modelPanel\")\n{\nlookThru $currentPanel $selObj;\n}")
	da_LookThruSelected;

runTimeCommand
	-annotation "Enable Bifrost Continuous Emission"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("PickWalkLeft;\nstring $objectShape[] = `listRelatives -s`;\nstring $myShaderGroup[] = `listConnections -type \"bifrostContainer\"`;\nsetAttr ($myShaderGroup[6] + \".bifrostContinuousEmission\") 1;\n\ninViewMessage -pos topCenter -msg \"Continuous emission enable on selected emitter(s)\" -fade;")
	da_BifrostContinuousEmission;

runTimeCommand
	-annotation "Disable Bifrost Continuous Emission"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("PickWalkLeft;\nstring $objectShape[] = `listRelatives -s`;\nstring $myShaderGroup[] = `listConnections -type \"bifrostContainer\"`;\nsetAttr ($myShaderGroup[6] + \".bifrostContinuousEmission\") 0;\n\ninViewMessage -pos topCenter -msg \"Continuous emission disabled on selected emitter(s)\" -fade;")
	da_BifrostNoContinuousEmission;

runTimeCommand
	-annotation "Enable Bifrost Mesh"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nsetAttr ($mySel[0] + \".meshingEnable\") 1;\n\ninViewMessage -pos topCenter -msg \"Bifrost mesh enable on selected simulation\" -fade;")
	da_BifrostMesh;

runTimeCommand
	-annotation "Disable Bifrost Mesh"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nsetAttr ($mySel[0] + \".meshingEnable\") 0;\n\ninViewMessage -pos topCenter -msg \"Bifrost mesh disable on selected simulation\" -fade;")
	da_BifrostNoMesh;

runTimeCommand
	-annotation "Enable Bifrost Gravity"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("PickWalkLeft;\n\nstring $mySel[] = `ls -sl`;\nstring $myEmitter[] = `listConnections $mySel`;\n\nsetAttr ($myEmitter[1] + \".gravityMagnitude\") 9.8;\n\ninViewMessage -pos topCenter -msg \"Bifrost gravity set at 9.8 on selected simulation\" -fade;")
	da_BifrostGravity;

runTimeCommand
	-annotation "Disable Bifrost Gravity"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("PickWalkLeft;\n\nstring $mySel[] = `ls -sl`;\nstring $myEmitter[] = `listConnections $mySel`;\n\nsetAttr ($myEmitter[1] + \".gravityMagnitude\") 0;\n\ninViewMessage -pos topCenter -msg \"Bifrost gravity disable on selected simulation\" -fade;")
	da_BifrostNoGravity;

runTimeCommand
	-annotation "List Input Operations on Object"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \ndetachHistoryTable $mySel[0] 0 input \"\";\nselect $mySel;")
	da_ListInputOperations;

runTimeCommand
	-annotation "nParticle Ignore Nucleous Gravity Solver"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".ignoreSolverGravity\") 1;\n}\ninViewMessage -pos topCenter -msg \"nParticle ignore Nucleous gravity solver\" -fade;")
	da_nParticleNoGravity;

runTimeCommand
	-annotation "nParticle use Nucleous gravity solver"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".ignoreSolverGravity\") 0;\n}\ninViewMessage -pos topCenter -msg \"nParticle use Nucleous gravity solver\" -fade;")
	da_nParticleGravity;

runTimeCommand
	-annotation "nParticle not Self Collide"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".selfCollide\") 0;\n}\ninViewMessage -pos topCenter -msg \"nParticle not Self Collide\" -fade;")
	da_nParticleNoSelfCollide;

runTimeCommand
	-annotation "nParticle Self Collide"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".selfCollide\") 1;\n}\ninViewMessage -pos topCenter -msg \"nParticle Self Collide\" -fade;")
	da_nParticleSelfCollide;

runTimeCommand
	-annotation "Enable Surface Snap on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceSnap\") 1;\n}\ninViewMessage -pos topCenter -msg \"Surface Snap On\" -fade;")
	da_BrushSurfaceSnap;

runTimeCommand
	-annotation "Disable Surface Snap on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceSnap\") 0;\n}\ninViewMessage -pos topCenter -msg \"Surface Snap Off\" -fade;")
	da_BrushNoSurfaceSnap;

runTimeCommand
	-annotation "Enable Surface Collide Outside on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 1;\nsetAttr ($each +\".collideMethod\") 0;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Outside On\" -fade;")
	da_BrushSurfaceCollideOutside;

runTimeCommand
	-annotation "Enable Surface Collide Inside on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 1;\nsetAttr ($each +\".collideMethod\") 1;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Inside On\" -fade;")
	da_BrushSurfaceCollideInside;

runTimeCommand
	-annotation "Enable Surface Collide Both on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 1;\nsetAttr ($each +\".collideMethod\") 2;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Both On\" -fade;")
	da_BrushSurfaceCollideBoth;

runTimeCommand
	-annotation "Disable Surface Collide on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 0;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Off\" -fade;")
	da_BrushNoSurfaceCollide;

runTimeCommand
	-annotation "Enable Occupy Attraction on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".occupyAttraction\") 2;\nsetAttr ($each +\".occupyBranchTermination\") 1;\n}\ninViewMessage -pos topCenter -msg \"Occupy Attraction On\" -fade;")
	da_BrushOccupyAttraction;

runTimeCommand
	-annotation "Disable Occupy Attraction on Selected Brush"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".occupyAttraction\") 0;\nsetAttr ($each +\".occupyBranchTermination\") 0;\n}\ninViewMessage -pos topCenter -msg \"Occupy Attraction Off\" -fade;")
	da_BrushNoOccupyAttraction;

runTimeCommand
	-annotation "Enable Occupy Volume on Line Modifier"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".shape\") 1;\nsetAttr ($each +\".widthScale\") 1;\nsetAttr ($each +\".occupyAttraction\") 5;\nsetAttr ($each +\".occupyBranchTermination\") 1;\n}\ninViewMessage -pos topCenter -msg \"Occupy Volume On\" -fade;")
	da_ModifierOccupyVolume;

runTimeCommand
	-annotation "Enable Occupy Volume on Line Modifier"
	-category "Custom Scripts.May9_Pro.PaintFX"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".occupyAttraction\") 0;\nsetAttr ($each +\".occupyBranchTermination\") 0;\n}\ninViewMessage -pos topCenter -msg \"Occupy Volume Off\" -fade;")
	da_ModifierNoOccupyVolume;

runTimeCommand
	-annotation "Parent and Position"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` > 1 ){\n    Parent;\n    string $myChild[] = `ls -sl`;\n    for ($each in $myChild){\n        setAttr ($each +\".translate\") -type \"double3\" 0 0 0;\n        setAttr ($each +\".rotate\") -type \"double3\" 0 0 0;\n    }\n}else{\n    confirmDialog -title \"Select at least two transform\" -message \"Please check if you have select at least two transform nodes.\"\n\t-button \"OK\" -defaultButton \"OK\";\n}")
	da_ParentAndPosition;

runTimeCommand
	-annotation "Reset Tweak Points to Zero"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("da_BackToObjectMode;\nstring $mySel[] = `listRelatives -s`;\nfor ($each in $mySel){\n    $indices = `getAttr -mi ($each + \".pnts\")`;\n    for ($i in $indices){\n    \tsetAttr($each + \".pnts[\" + $i + \"]\", 0,0,0);\n    }\n}")
	da_ResetTweakPoint;

runTimeCommand
	-annotation "Enable Follicle Braid"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}")
	da_FollicleBraid;

runTimeCommand
	-annotation "Disable Follicle Braid"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}")
	da_FollicleNoBraid;

runTimeCommand
	-annotation "Switch Manipulator Modes for Componets"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $ToolCheck = (`currentCtx`);\n\nint $MoveCheck = (`manipMoveContext -q -mode Move`);\nint $RotateCheck = (`manipRotateContext -q -mode Rotate`);\nint $ScaleCheck = (`manipScaleContext -q -mode Scale`);\n\nif ($MoveCheck != 9 && $ToolCheck == \"moveSuperContext\"){\n    manipMoveContext -e -mode 9 Move;\n    inViewMessage -pos topCenter -msg \"Component Axis Orientation\" -fade;\n}\nif ($MoveCheck != 0 && $ToolCheck == \"moveSuperContext\"){\n    manipMoveContext -e -mode 0 Move;\n\tinViewMessage -pos topCenter -msg \"Object Axis Orientation\" -fade;\n}\nif ($RotateCheck != 9 && $ToolCheck == \"RotateSuperContext\"){\n    manipRotateContext -e -mode 9 Rotate;\n    inViewMessage -pos topCenter -msg \"Component Axis Orientation\" -fade;\n}\nif ($RotateCheck != 0 && $ToolCheck == \"RotateSuperContext\"){\n    manipRotateContext -e -mode 0 Rotate;\n\tinViewMessage -pos topCenter -msg \"Object Axis Orientation\" -fade;\n}\nif ($ScaleCheck != 9 && $ToolCheck == \"scaleSuperContext\"){\n    manipScaleContext -e -mode 9 Scale;\n\tinViewMessage -pos topCenter -msg \"Component Axis Orientation\" -fade;\n}\nif ($ScaleCheck != 0 && $ToolCheck == \"scaleSuperContext\"){\n    manipScaleContext -e -mode 0 Scale;\n\tinViewMessage -pos topCenter -msg \"Object Axis Orientation\" -fade;\n}")
	da_ManipToggleComp;

runTimeCommand
	-annotation "Switch Manipulator Modes for Transform"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $ToolCheck = (`currentCtx`);\n\nint $MoveCheck = (`manipMoveContext -q -mode Move`);\nint $RotateCheck = (`manipRotateContext -q -mode Rotate`);\nint $ScaleCheck = (`manipScaleContext -q -mode Scale`);\n\nif ($MoveCheck != 2 && $ToolCheck == \"moveSuperContext\"){\n    manipMoveContext -e -mode 2 Move;\n    inViewMessage -pos topCenter -msg \"World Axis Orientation\" -fade;\n}\nif ($MoveCheck != 0 && $ToolCheck == \"moveSuperContext\"){\n    manipMoveContext -e -mode 0 Move;\n    inViewMessage -pos topCenter -msg \"Object Axis Orientation\" -fade;\n}\nif ($RotateCheck != 2 && $ToolCheck == \"RotateSuperContext\"){\n    manipRotateContext -e -mode 2 Rotate;\n    inViewMessage -pos topCenter -msg \"Gimbal Axis Orientation\" -fade;\n}\nif ($RotateCheck != 0 && $ToolCheck == \"RotateSuperContext\"){\n    manipRotateContext -e -mode 0 Rotate;\n    inViewMessage -pos topCenter -msg \"Object Axis Orientation\" -fade;\n}\nif ($ScaleCheck != 2 && $ToolCheck == \"scaleSuperContext\"){\n    manipScaleContext -e -mode 2 Scale;\n    inViewMessage -pos topCenter -msg \"World Axis Orientation\" -fade;\n}\nif ($ScaleCheck != 0 && $ToolCheck == \"scaleSuperContext\"){\n    manipScaleContext -e -mode 0 Scale;\n    inViewMessage -pos topCenter -msg \"Object Axis Orientation\" -fade;\n}")
	da_ManipToggleTrans;

runTimeCommand
	-annotation "Switch Manipulator Modes"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myCollection[] = `ls -sl`;\nint $n = size($myCollection);\n\nif($n > 0){\n    string $id = `nodeType $myCollection[0]`;\n     \n    if($id == \"mesh\"){ \n    \n        string $faces[] = `filterExpand -sm 34`;\n        string $vertices[] = `filterExpand -sm 31`;\n        string $edges[] = `filterExpand -sm 32`;\n        \n        if(size($faces)>0 || size($vertices)>0 || size($edges)>0){\n            da_ManipToggleComp;                  \n        }        \n                \n    }else if($id == \"transform\"){\n        da_ManipToggleTrans;\n         \n    }else if($id == \"nurbsSurface\"){\n        \n        string $isoparms[] = `filterExpand -sm 45`;\n        int $totalIsoparms = size($isoparms);\n        string $patches[] = `filterExpand -sm 72`;\n        int $totalPatches = size($patches);\n        \n        if($totalIsoparms > 0){\n            da_ManipToggleComp;           \n        }\n        if($totalPatches > 0){\n            da_ManipToggleComp;\n        }\n    }else{\n        da_ManipToggleTrans;\n    }   \n}\nif ($n == 0){\n    print (\"Select component(s) or object(s)\");\n}")
	da_ManipToggle;

runTimeCommand
	-annotation "UV Selection on Selected Objects"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$myUvSel = `ls -sl -l`;\nint $numObj = size($myUvSel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($myUvSel[$i], \"puv\");")
	da_SelectUV;

runTimeCommand
	-annotation "Particle Selection on Selected Simulation"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$myParticleSel = `ls -sl -l`;\nint $numObj = size($myParticleSel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($myParticleSel[$i], \"particle\");")
	da_SelectParticle;

runTimeCommand
	-annotation "Multi Component Selection on Selected Polygons"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `filterExpand -ex true -selectionMask 12`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($mySel[$i], \"meshComponents\");")
	da_SelectMulti;

runTimeCommand
	-annotation "Control Vertex Selection on Selected Curves"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `filterExpand -ex true -selectionMask 9`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($mySel[$i], \"controlVertex\");")
	da_SelectCV;

runTimeCommand
	-annotation "Lattice Point Selection on Selected Lattice"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `filterExpand -ex true -selectionMask 6`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($mySel[$i], \"latticePoint\");")
	da_SelectLattice;

runTimeCommand
	-annotation "Go to Component Mode"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setSelectMode(\"components\", \"Components\"); ")
	da_GoToComponentMode;

runTimeCommand
	-annotation "Revert Selection to Componento Mode"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$hilite = `ls -hilite`; \n$obj = `ls -dag -sl`; \nsetSelectMode(\"objects\", \"Objects\"); \nselect -r $obj $hilite; ")
	da_BackToObjectMode;

runTimeCommand
	-annotation "Bevel Curve(s) for Text"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("bevelPlus -constructionHistory true  -normalsOutwards true  -range false  -polygon 1 -tolerance 0.01 -numberOfSides 4 -js true  -width 0.01 -depth 0.01 -extrudeDepth 0.1 -capSides 4 -bevelInside 0 -outerStyle 0 -innerStyle 0 -polyOutMethod 2 -polyOutCount 200 -polyOutExtrusionType 3 -polyOutExtrusionSamples 4 -polyOutCurveType 3 -polyOutCurveSamples 15 -polyOutUseChordHeightRatio 0;")
	da_BevelPlusForText;

runTimeCommand
	-annotation "Enable Time Dragger in Smooth Mode"
	-category "Custom Scripts.May9_Pro.Animate"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("storeLastAction( \"restoreLastContext \" + `currentCtx` );setToolTo TimeDragger;timeControl -e -snap false $gPlayBackSlider;")
	da_TimeDraggerSmooth;

runTimeCommand
	-annotation "Enable Time Dragger in Smooth Mode"
	-category "Custom Scripts.May9_Pro.Animate"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("invokeLastAction;\ntimeControl -e -snap true $gPlayBackSlider;\nint $n = `currentTime -query`;\ncurrentTime -edit $n;")
	da_TimeDraggerNoSmooth;

runTimeCommand
	-annotation "Frame Only Selected Object into a Hierarchy"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("PickWalkDown;\nfitPanel -selected;\nPickWalkUp")
	da_FrameOnlySelected;

runTimeCommand
	-annotation "Simple UV Based Deformer"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("transferAttributes -transferPositions 1 -transferNormals 0 -transferUVs 2 -transferColors 2 -sampleSpace 3 -sourceUvSpace \"map1\" -targetUvSpace \"map1\" -searchMethod 3-flipUVs 0 -colorBorders 1;\nCenterPivot\n")
	da_DeformerUV;

runTimeCommand
	-annotation "Auto IPR on all render region for all render engine"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`getAttr defaultRenderGlobals.currentRenderer` == \"arnold\"){\n\tda_AiRenderView;\n}\nelse{ \n\tRenderViewWindow;\n\tIPRRenderIntoNewWindow;\n\trenderWindowCheckAndRenderRegion 1 0 0 1;\n}\n\ninViewMessage -pos topCenter -msg \"Starting Render\" -fade;")
	da_ProgressiveIPR;

runTimeCommand
	-annotation "Toggle Nurbs Curves Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -nurbsCurves $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -nurbsCurves 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Curves visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -nurbsCurves 1 $panel;\n    inViewMessage -pos topCenter -msg \"Curves visibility ON\" -fade;\n}")
	da_ToggleNurbsCurvesVis;

runTimeCommand
	-annotation "Toggle Nurbs Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -nurbsSurfaces $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -nurbsSurfaces 0 $panel;modelEditor -e -hos 0 $panel;\n\tinViewMessage -pos topCenter -msg \"NURBS visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -nurbsSurfaces 1 $panel;modelEditor -e -hos 1 $panel;\n    inViewMessage -pos topCenter -msg \"NURBS visibility ON\" -fade;\n}")
	da_ToggleNurbsVis;

runTimeCommand
	-annotation "Toggle Subdiv Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -subdivSurfaces $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -subdivSurfaces 0 $panel;modelEditor -e -hos 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Subdivision Surfaces visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -subdivSurfaces 1 $panel;modelEditor -e -hos 1 $panel;\n    inViewMessage -pos topCenter -msg \"Subdivision Surfaces visibility ON\" -fade;\n}")
	da_ToggleSubVis;

runTimeCommand
	-annotation "Toggle Poly Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -polymeshes $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -polymeshes 0 $panel;modelEditor -e -hos 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Polygons visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -polymeshes 1 $panel;modelEditor -e -hos 1 $panel;\n    inViewMessage -pos topCenter -msg \"Polygons visibility ON\" -fade;\n}")
	da_TogglePolyVis;

runTimeCommand
	-annotation "Toggle Light Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -lights $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -lights 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Light visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -lights 1 $panel;\n    inViewMessage -pos topCenter -msg \"Light visibility ON\" -fade;\n}")
	da_ToggleLightVis;

runTimeCommand
	-annotation "Toggle Joint Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -joints $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -joints 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Joints visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -joints 1 $panel;\n    inViewMessage -pos topCenter -msg \"Joints visibility ON\" -fade;\n}")
	da_ToggleJointVis;

runTimeCommand
	-annotation "Toggle IK Handles Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -ikHandles $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -ikHandles 0 $panel;\n\tinViewMessage -pos topCenter -msg \"IK Handles visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -ikHandles 1 $panel;\n    inViewMessage -pos topCenter -msg \"IK Handles visibility ON\" -fade;\n}")
	da_ToggleIkVis;

runTimeCommand
	-annotation "Toggle Deformers Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -deformers $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -deformers 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Deformers visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -deformers 1 $panel;\n    inViewMessage -pos topCenter -msg \"Deformers visibility ON\" -fade;\n}")
	da_ToggleDefVis;

runTimeCommand
	-annotation "Toggle Locator Visibility"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -locators $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -locators 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Locator Handles visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -locators 1 $panel;\n    inViewMessage -pos topCenter -msg \"Locator Handles visibility ON\" -fade;\n}")
	da_ToggleLocVis;

runTimeCommand
	-annotation "Enable Double Side on Selected"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -s $mySel`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($myShape[$i] + \".doubleSided\") 1;\n}")
	da_DoubleSideOn;

runTimeCommand
	-annotation "Disable Double Side on Selected"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -s $mySel`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($myShape[$i] + \".doubleSided\") 0;\n}")
	da_DoubleSideOff;

runTimeCommand
	-annotation "Open light List Panel UI"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("callPython \"maya.app.renderSetup.views.lightEditor.editor\" \"openEditorUI\" {};")
	da_LightList;

runTimeCommand
	-annotation "Enable MMtoKey"
	-category "Custom Scripts.May9_Pro.MMtoKey"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("try:\n    MMtoKey.pressSelected(ctl=False, alt=False, sh=False)\nexcept Exception: \n    pass")
	da_MMtoKey_press;

runTimeCommand
	-annotation "Disable MMtoKey"
	-category "Custom Scripts.May9_Pro.MMtoKey"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("maya.cmds.evalDeferred('MMtoKey.releaseSelected()', lp = True)")
	da_MMtoKey_release;

runTimeCommand
	-annotation "Show HG Connection of a node(s)"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("showDGLevel hyperGraphPanel1HyperGraphEd;")
	da_HgConnectionLevel;

runTimeCommand
	-annotation "Save Current Render as Image"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("renderWindowMenuCommand saveImage renderView")
	da_SaveRenderImage;

runTimeCommand
	-annotation "Create Transform nConstraint"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("performCreateDynamicConstraint 0 \"transform\";")
	da_NconstraintTransform;

runTimeCommand
	-annotation "Edit Current Deformer"
	-category "Custom Scripts.May9_Pro.Animate"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ShowManipulators;da_LastOpInStack")
	da_EditDeformer;

runTimeCommand
	-annotation "Enable Legacy Subdiv in Poly Mode"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -o`;\nsubdGivenIntoPolyMode $mySel[0] 1 0 0 0;\ninViewMessage -pos topCenter -msg \"Poly Mode\" -fade;")
	da_LegacySubdivPolyMode;

runTimeCommand
	-annotation "Enable Legacy Subdiv in Standard Mode"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -o`;\nsubdGivenIntoHierMode $mySel[0];\ninViewMessage -pos topCenter -msg \"Subd Mode\" -fade;")
	da_LegacySubdivStandardMode;

runTimeCommand
	-annotation "Toggle Legacy Subdiv Mode"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $LegacySubdivTag = (($LegacySubdivTag + 1) % 2);\n\nif ($LegacySubdivTag)\n{\n\tda_LegacySubdivPolyMode;\n}\nelse\n{\n    da_LegacySubdivStandardMode;\n}")
	da_LegacySubdivToggle;

runTimeCommand
	-annotation "Enable Physically Based"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".spaceScale\") 0.010;\n}\ninViewMessage -pos topCenter -msg \"Physically Based Enable\" -fade;")
	da_NucleusPhysicallyBasedOn;

runTimeCommand
	-annotation "Disable Physically Based"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".spaceScale\") 1;\n}\ninViewMessage -pos topCenter -msg \"Physically Based Enable\" -fade;")
	da_NucleusPhysicallyBasedOff;

runTimeCommand
	-annotation "Go from Create Node to Mesh Node"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -s $mySel`;\nselect $myShape;\nPickWalkUp")
	da_GoToMesh;

runTimeCommand
	-annotation "Open Arnold TX Manager"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`pluginInfo -q -loaded mtoa` == 0)\n\tprint \"Load Arnold before continue\";\nelse\n\tpython( \"import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.arnoldTxManager()\" );")
	da_TxManager;

runTimeCommand
	-annotation "Enable Arnold Render Curves"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n    if ( `objExists CurveShader` ) {\n        setAttr ($each +\".aiRenderCurve\") 1;\n    \tsetAttr ($each +\".aiMode\") 1;\n    \tsetAttr ($each +\".aiCurveWidth\") 1;\n        connectAttr -f \"CurveShader.outColor\" ($each +\".aiCurveShader\");\n    } else {\n        createNode aiStandard -n CurveShader;\n        setAttr ($each +\".aiRenderCurve\") 1;\n    \tsetAttr ($each +\".aiMode\") 1;\n    \tsetAttr ($each +\".aiCurveWidth\") 1;\n        connectAttr -f \"CurveShader.outColor\" ($each +\".aiCurveShader\");\n    }\n}\n\ninViewMessage -pos topCenter -msg \"Arnold enable on selected curve(s)\" -fade;")
	da_AiRenderCurve;

runTimeCommand
	-annotation "Disable Arnold Render Curves"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".aiRenderCurve\") 0;\n\ninViewMessage -pos topCenter -msg \"Arnold render disable on selected curve(s)\" -fade;")
	da_AiNoRenderCurve;

runTimeCommand
	-annotation "Enable Arnold Light Normalization"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".aiNormalize\") 1;\n\ninViewMessage -pos topCenter -msg \"Light Normalization On\" -fade;")
	da_AiLightNormalize;

runTimeCommand
	-annotation "Disable Arnold Light Normalization"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".aiNormalize\") 0;\n\ninViewMessage -pos topCenter -msg \"Light Normalization Off\" -fade;")
	da_AiNoLightNormalize;

runTimeCommand
	-annotation "Create AiPhotometric Light"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import mtoa.utils as mutils; mutils.createLocator(\"aiPhotometricLight\", asLight=True)")
	da_AiPhotometric;

runTimeCommand
	-annotation "Create AiSkyDome Light"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import mtoa.utils as mutils; mutils.createLocator(\"aiSkyDomeLight\", asLight=True)")
	da_AiSkyDome;

runTimeCommand
	-annotation "Create ai Mesh Light"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import mtoa.utils as mutils; mutils.createMeshLight()")
	da_AiMeshLight;

runTimeCommand
	-annotation "Create a MASH Network for Voxelize a Mash"
	-category "Custom Scripts.May9_Pro.MASH"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myResult = `confirmDialog -title \"Confirm\" -message \"Make sure you have selected before filler mesh, do you continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\tif ($myResult == \"Yes\") {\n        select $mySel[0];\n        MASHnewNetwork(\"MASH#\");\n        string $myMashNerwork[] = `listConnections -s true -d false`;\n        \n        // Create connection and set MASH to Voxelize\n        connectAttr ($mySel[1] + \".worldMesh[0]\", $myMashNerwork[0] + \".inputMesh\");\n        \n        setAttr ($myMashNerwork[0] + \".arrangement\") 4;\n        setAttr ($myMashNerwork[0] + \".meshType\") 6;\n        setAttr ($myMashNerwork[0] + \".voxelMode\") 2;\n        \n        // Set hidden order and open Attribute Editor wondow\n        hide $mySel[1];\n        showHidden $mySel[0];\n        \n        select $myMashNerwork[0];\n        \n        openAEWindow;\n    }\n}else{\n    string $myResult = `confirmDialog -title \"Warning\" -message \"Please select only two meshes, first the filler than the volume.\" \n\t-button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;\n}")
	da_MashVoxelizer;

runTimeCommand
	-annotation "Toggle Tool Settings"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ToggleToolSettings")
	da_ToolSettings;

runTimeCommand
	-annotation "Open Bifrost Ocean Simulation"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("be.BossEditor()")
	da_OpenBossEditor;

runTimeCommand
	-annotation "Raise Modeling Toolkit UI"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("showModelingToolkit")
	da_ModelingToolkit;

runTimeCommand
	-annotation "Open Color Editor UI"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("colorEditor")
	da_OpenColorEditor;

runTimeCommand
	-annotation "Display Joints As Bone"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".drawStyle\") 0;\n}\ninViewMessage -pos topCenter -msg \"Display Joints As Bone\" -fade;")
	da_JointsAsBone;

runTimeCommand
	-annotation "Display Joints As None"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".drawStyle\") 2;\n}\ninViewMessage -pos topCenter -msg \"Display Joints As None\" -fade;")
	da_JointsAsNone;

runTimeCommand
	-annotation "Go to Front Camera"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Front View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Front View\" -fade;")
	da_GoToFront;

runTimeCommand
	-annotation "Go to Side Camera"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Side View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Side View\" -fade;")
	da_GoToSide;

runTimeCommand
	-annotation "Go to Top Camera"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Top View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Top View\" -fade;")
	da_GoToTop;

runTimeCommand
	-annotation "Go to Persp Camera"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Persp View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Persp View\" -fade;")
	da_GoToPersp;

runTimeCommand
	-annotation "Find Maya Menu"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("findMenuItem")
	da_FindMenu;

runTimeCommand
	-annotation "Open Tool Property Window"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("toolPropertyWindow -inMainWindow true")
	da_ToolProperty;

runTimeCommand
	-annotation "Convet Polygons to NURBS surface"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("doSubdivCreate( \"2\", { \"1\",\"1\",\"10000\",\"128\"} );\ndoSubdivToNurbs( {\"1\",\"1\",\"0\"} );\nhyperShade -assign initialShadingGroup;")
	da_PolyToNurbs;

runTimeCommand
	-annotation "Connect a Mesh to Membrane Collide"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mesh[] = `ls -sl -ni -typ \"mesh\"`;\nstring $membrane[] = `ls -sl -ni -typ \"membrane\"`;\n\nconnectAttr -f ($mesh[0] + \".worldMesh\") ($membrane[0] + \".collideMesh\");")
	da_MembraneCollider;

runTimeCommand
	-annotation "Set nHair Point Lock to Base"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}")
	da_HairLockBase;

runTimeCommand
	-annotation "Set nHair Point Lock to Both Ends"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}")
	da_HairLockBothEnds;

runTimeCommand
	-annotation "Set nHair Point Lock to No Attach"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}")
	da_HairNoLock;

runTimeCommand
	-annotation "Set nHair Simulation Method to Dynamic"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}")
	da_HairDynamic;

runTimeCommand
	-annotation "Set nHair Simulation Method to Passive"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}")
	da_HairPassive;

runTimeCommand
	-annotation "Set nHair Simulation Method to Static"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}")
	da_HairStatic;

runTimeCommand
	-annotation "Enable Locator(s) Shape(s) Visibility"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nfor ($i=0; $i<size($mySel); $i++)\n\tsetAttr ($mySel[$i] + \".visibility\") 1;\n\ninViewMessage -pos topCenter -msg \"Locator Shape Visibility On\" -fade;")
	da_LocatorVisibility;

runTimeCommand
	-annotation "Disable Locator(s) Shape(s) Visibility"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nfor ($i=0; $i<size($mySel); $i++)\n\tsetAttr ($mySel[$i] + \".visibility\") 0;\n\ninViewMessage -pos topCenter -msg \"Locator Shape Visibility Off\" -fade;")
	da_LocatorNoVisibility;

runTimeCommand
	-annotation "Set IK Preferred Angle"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myIK[] = `ls -sl`;\nfor ($i=0; $i<size($myIK); $i++) {\n\tjoint -e -spa -ch $myIK[$i];\n}\n")
	da_SetIKPerfAngle;

runTimeCommand
	-annotation "Assume IK Preferred Angle"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myIK[] = `ls -sl`;\nfor ($i=0; $i<size($myIK); $i++) {\n\tjoint -e -apa -ch $myIK[$i];\n}")
	da_AssumeIKPrefAngle;

runTimeCommand
	-annotation "Set Muscle Bone as Fat"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".draw\") 1;\n}\ninViewMessage -pos topCenter -msg \"Display Muscle Bone as Fat\" -fade;")
	da_BoneAsFat;

runTimeCommand
	-annotation "Set Muscle Bone as Off"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".draw\") 0;\n}\ninViewMessage -pos topCenter -msg \"Display Muscle Bone as Off\" -fade;")
	da_BoneAsOff;

runTimeCommand
	-annotation "Select Right Angle Edges"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -a on -ab 80 100;// to get edges with angle between\nstring $rightAngleSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\nselect $rightAngleSel;")
	da_EdgeRightAngle;

runTimeCommand
	-annotation "Select Straight Angle Edges"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -a on -ab 0 80;// to get edges with angle between\nstring $straightAngleSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\nselect $straightAngleSel;")
	da_EdgeStraightAngle;

runTimeCommand
	-annotation "Select Acute Angle Edges"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -a on -ab 100 180;// to get edges with angle between\nstring $acuteAngleSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\nselect $acuteAngleSel;")
	da_EdgeAcuteAngle;

runTimeCommand
	-annotation "Select Border Edges"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -w 1;\nstring $borderSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -w 0;\nselect $borderSel;")
	da_EdgeBorder;

runTimeCommand
	-annotation "Select Inside Edge"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -w 2;\nstring $insideSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -w 0;\nselect $insideSel;")
	da_EdgeInside;

runTimeCommand
	-annotation "Select Hard Edges"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -sm 1;\nstring $hardEdge[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -sm 0;\nselect $hardEdge;")
	da_EdgeHard;

runTimeCommand
	-annotation "Select Soft Edge"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -sm 2;\nstring $softEdge[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -sm 0;\nselect $softEdge;")
	da_EdgeSoft;

runTimeCommand
	-annotation "Create Metaballs from particle"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("da_nParticleNoGravity;\nstring $particleGroupSel[] = `ls -sl`;\nselect $particleGroupSel[0];\nda_SelectParticle;\nSelectAll;\nstring $particleSel[] = `ls -sl -fl`;\nfor ($i=0; $i<`size$particleSel`; $i++)\n{\n\tselect $particleSel[$i];\n\tCreateCluster;\n}\n\nselect $particleGroupSel;\ndoParticleToPoly;\n\nstring $objectTransform[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nsetAttr ($objectTransform[0] +\".overrideEnabled\") 1;\nsetAttr ($objectTransform[0] +\".overrideDisplayType\") 2;\n\naddAttr -ln \"Threshold\"  -at double  -min 0 -dv 0.6 $objectTransform;\naddAttr -ln \"Radius\"  -at double  -min 0 -dv 7 $objectTransform;\nsetAttr -e-keyable true ($objectTransform[0] + \".Threshold\");\nsetAttr -e-keyable true ($objectTransform[0] + \".Radius\");\n\nstring $myShapeConnection[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myShapeConnection;\napplyPresetToNode $myShapeConnection[0] \"\" \"\" \"da_MetaBalls\" 1;\n\nconnectAttr($objectTransform[0] + \".Threshold\", $myShapeConnection[0] + \".threshold\");\nconnectAttr($objectTransform[0] + \".Radius\", $myShapeConnection[0] + \".blobbyRadiusScale\");\n\t\ncreateRenderNodeCB -asShader \"surfaceShader\" rampShader \"assignCreatedShader %type \\\"\\\" %node $objectShape[0]\";\n\t\nstring $myShaderGroup[] = `listConnections -type \"shadingEngine\"`;\nselect -ne $myShaderGroup[0];\nstring $myShader[] = `listConnections -type \"rampShader\"`;\napplyPresetToNode $myShader[0] \"\" \"\" \"da_MetaBalls\" 1;\n\nrename $myShader[0] \"MetaBalls1\";\nrename $objectTransform[0] \"metaBallsMesh1\";")
	da_ConvertToMetaballs;

runTimeCommand
	-annotation "Move Objects to World Center"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tmove -rpr 0 0 0 $each;\n}\nFreezeTransformations")
	da_ZeroTransfomations;

runTimeCommand
	-annotation "Reset All Transformations"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tmove -a 0 0 0 $each;\n\trotate -a 0 0 0 $each;\n\tscale -a 1 1 1 $each;\n}")
	da_ResetAllTransformations;

runTimeCommand
	-annotation "Connect Shapes"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n    connectAttr -f ($createConnect[0] + \".outMesh\") ($createConnect[$i] + \".inMesh\");\n}")
	da_ConnectShapes;

runTimeCommand
	-annotation "Auto Connect a Collider from Viewport"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $objectShape[] = `listRelatives -s`;\nselect $objectShape;\n\nstring $myShapeConnection[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myShapeConnection;\n\nstring $myMembrane[] = `ls -sl -ni -typ \"membrane\"`;\nselect $myMembrane;\n\nconnectAttr -f ($objectShape[1] + \".worldMesh\") ($myMembrane[0] + \".collideMesh\");")
	da_Auto_MembraneCollider;

runTimeCommand
	-annotation "Select Assigned Shader from Selection"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("hyperShade -smn;\nAttributeEditor")
	da_SelectAssignedShader;

runTimeCommand
	-annotation "Enable Reference Mode for Object Transform"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $objectTransform[] = `ls -sl -tr`;\nfor ($each in $objectTransform){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideDisplayType\") 2;\n}")
	da_EnableReference;

runTimeCommand
	-annotation "Disable Reference Mode for Object Transform"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $objectTransform[] = `ls -sl -tr`;\nfor ($each in $objectTransform){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideDisplayType\") 0;\n}")
	da_DisableReference;

runTimeCommand
	-annotation "Toggle Wireframe when Scupt"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $currentTool = `currentCtx`;\nint $wireframeCheck = `sculptMeshCacheCtx -q -displayWireframe $currentTool`;\n\nif ($wireframeCheck == 1){\n    sculptMeshCacheCtx -e -displayWireframe 0 $currentTool;\n} else {\n    sculptMeshCacheCtx -e -displayWireframe 1 $currentTool;\n}")
	da_ToggleSculptWireframe;

runTimeCommand
	-annotation "Enable Portal Light Filter on Selected Area Lights"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiUserOptions\") -type \"string\" \"declare portal constant BOOL portal true\";\n    \ninViewMessage -pos topCenter -msg \"Portal Light On\" -fade;")
	da_AiPortalLight;

runTimeCommand
	-annotation "Disable Portal Light Filter on Selected Area Lights"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiUserOptions\") -type \"string\" \"declare portal constant BOOL portal false\";\n\ninViewMessage -pos topCenter -msg \"Portal Light Off\" -fade;")
	da_AiNoPortalLight;

runTimeCommand
	-annotation "Open Arnold Render View"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.arnoldMtoARenderView()")
	da_AiRenderView;

runTimeCommand
	-annotation "Connect Selected Mesh as nCloth Input Mesh"
	-category "Custom Scripts.May9_Pro.Animate"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myMesh[] = `ls -sl -ni -typ \"mesh\"`;\nstring $mynCloth[] = `ls -sl -ni -typ \"nCloth\"`;\n\nconnectAttr -f ($myMesh[0] + \".worldMesh\") ($mynCloth[0] + \".inputMesh\");\nconnectAttr -f ($myMesh[0] + \".worldMesh\") ($mynCloth[0] + \".restShapeMesh\");")
	da_ClothInputMesh;

runTimeCommand
	-annotation "Create nCloth as Deformer by Using an Attract Mesh"
	-category "Custom Scripts.May9_Pro.Animate"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $attractMesh[] = `ls -sl -ni -typ \"transform\"`;\nduplicate;\nstring $restMesh[] = `ls -sl`;\nduplicate;\nstring $nClothMesh[] = `ls -sl`;\ndoCreateNCloth 0;\nstring $nClothShape[] = `ls -sl`;\n\nsetAttr ($nClothShape[0] +\".inputMeshAttract\") 1;\nconnectAttr -f ($attractMesh[0] + \".worldMesh\") ($nClothShape[0] + \".inputMesh\");\nconnectAttr -f ($restMesh[0] + \".worldMesh\") ($nClothShape[0] + \".restShapeMesh\");\nconnectAttr -f ($attractMesh[0] + \".outMesh\") ($restMesh[0] + \".inMesh\");\n\nselect $restMesh;\nda_ResetTweakPoint;\n\nselect $attractMesh[0];\nhide $attractMesh[0];\nselect $attractMesh[0];\nrename ( $attractMesh[0] + \"_attract1\" );\n\nselect $restMesh[0];\nhide $restMesh[0];\nselect $restMesh[0];\nrename ( $restMesh[0] + \"_rest1\" );\n\nselect $nClothMesh[0];\nrename ( $nClothMesh[0] + \"_nCloth1\" );")
	da_ClothAsDeformer;

runTimeCommand
	-annotation "Copy Selection in Temp Variable"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $May9_Clipboard[] = `ls -sl`;\ninViewMessage -pos topCenter -msg \"Selection Copied\" -fade;")
	da_CopySelection;

runTimeCommand
	-annotation "Paste Selection from Temp Variable"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("select $May9_Clipboard;\ninViewMessage -pos topCenter -msg \"Selection Pasted\" -fade;")
	da_PasteSelection;

runTimeCommand
	-annotation "Toggle Wireframe when Paint Skin"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $currentTool = `currentCtx`;\nint $wireframeCheck = `artAttrSkinPaintCtx -q -showactive $currentTool`;\n\nif ($wireframeCheck == 1){\n\tartAttrSkinPaintCtx -e -showactive 0 $currentTool;\n}else{\n\tartAttrSkinPaintCtx -e -showactive 1 $currentTool;\n}")
	da_ToggleSkinWireframe;

runTimeCommand
	-annotation "Enable Plane"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".usePlane\") 1;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Plane Enable\" -fade;")
	da_NucleusPlaneOn;

runTimeCommand
	-annotation "Disable Plane"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".usePlane\") 0;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Plane Disable\" -fade;")
	da_NucleusPlaneOff;

runTimeCommand
	-annotation "Enable High Precision"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\nsetAttr ($each +\".subSteps\") 18;\nsetAttr ($each +\".maxCollisionIterations\") 24;\n}\ninViewMessage -pos topCenter -msg \"Nucleus High Precision Enable\" -fade;")
	da_NucleusHqOn;

runTimeCommand
	-annotation "Disable High Precision"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\nsetAttr ($each +\".subSteps\") 3;\nsetAttr ($each +\".maxCollisionIterations\") 4;\n}\ninViewMessage -pos topCenter -msg \"Nucleus High Precision Disable\" -fade;")
	da_NucleusHqOff;

runTimeCommand
	-annotation "Enable Gravity"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".gravityDirectionY\") -1;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Gravity Enable\" -fade;")
	da_NucleusGravityOn;

runTimeCommand
	-annotation "Disable Gravity"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".gravityDirectionY\") 0;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Gravity Disable\" -fade;")
	da_NucleusGravityOff;

runTimeCommand
	-annotation "Connect Poly Create Node to Mesh"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n\tconnectAttr -f ($createConnect[0] + \".output\") ($createConnect[$i] + \".inMesh\");\n}")
	da_ConnectCereation;

runTimeCommand
	-annotation "Create Ai LightPortal"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import mtoa.utils as mutils;mutils.createLocator(\"aiLightPortal\", asLight=True)")
	da_AiLightPortal;

runTimeCommand
	-annotation "Toggle Playback Animation"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("play -state (!`play -q -state`);")
	da_TogglePlayback;

runTimeCommand
	-annotation "Soft Selection Deformer Rigged"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $softModCheck = `optionVar -q softModToolMode`;\nif ( $softModCheck == 1 ){\n    optionVar -iv softModToolMode 0;\n}\n\nstring $polySel[] = `listRelatives -s`;\n\ncircle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\nstring $moveCtrlSel[] = `ls -sl`;\nselect $moveCtrlSel[0] $polySel[0];\nparent;\nsetAttr ($moveCtrlSel[0] +\".translate\") -type \"double3\" 0 5 0;\nsetAttr ($moveCtrlSel[0] +\".rotate\") -type \"double3\" 0 0 90;\n\ncircle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\nstring $adjustCtrlSel[] = `ls -sl`;\nstring $adjustCtrlShapeSel[] = `listRelatives -s`;\nsetAttr ($adjustCtrlShapeSel[0] +\".overrideEnabled\") 1;\nsetAttr ($adjustCtrlShapeSel[0] +\".overrideColor\") 13;\n\nsoftSelect -softSelectEnabled 0;\nselect ( $adjustCtrlSel[0] + \".cv[0]\" );\nmove -r -.25 -0 .25;\nselect ( $adjustCtrlSel[0] + \".cv[2]\" );\nmove -r .25 0 .25;\nselect ( $adjustCtrlSel[0] + \".cv[4]\" );\nmove -r .25 0 -0.25;\nselect ( $adjustCtrlSel[0] + \".cv[6]\" );\nmove -r -.25 0 -0.25;\n\naddAttr -ln \"Size\" -at double -min 0.001 -dv 5 $adjustCtrlSel;\nsetAttr -e -keyable true ($adjustCtrlSel[0] + \".Size\");\nselect $adjustCtrlSel[0] $moveCtrlSel[0];\nparent;\nsetAttr ($adjustCtrlSel[0] +\".translate\") -type \"double3\" 0 0 0;\nsetAttr ($adjustCtrlSel[0] +\".rotate\") -type \"double3\" 0 0 0;\nselect $moveCtrlSel[0];\nparent -w;\n\n\nspaceLocator -p 0 0 0;\nstring $wordSpaceLocSel[] = `ls -sl`;\nselect $wordSpaceLocSel[0] $polySel[0];\nparent;\nsetAttr ($wordSpaceLocSel[0] +\".translate\") -type \"double3\" 0 0 0;\nsetAttr ($wordSpaceLocSel[0] +\".rotate\") -type \"double3\" 0 0 0;\nselect $wordSpaceLocSel[0];\nparent -w;\nselect $moveCtrlSel[0] $adjustCtrlSel[0];\nda_ClearFreeze;\nselect $moveCtrlSel[0] $wordSpaceLocSel[0];\ndoCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\nselect $polySel[0];\n\nperformSoftMod 0 0 0 {0.0, 0.0, 0.0};\nstring $softSel[] = `ls -sl`;\nstring $softModSel[] = `listConnections -s 0 -d 1 -sh 1`;\nconnectAttr -f ($adjustCtrlSel[0] + \".translate\") ($softSel[0] + \".translate\");\nconnectAttr -f ($adjustCtrlSel[0] + \".rotate\") ($softSel[0] + \".rotate\");\nconnectAttr -f ($adjustCtrlSel[0] + \".scale\") ($softSel[0] + \".scale\");\nconnectAttr -f ($wordSpaceLocSel[0] + \".translate\") ($softModSel[0] + \".falloffCenter\");\nconnectAttr -f ($adjustCtrlSel[0] + \".Size\") ($softModSel[0] + \".falloffRadius\");\n\nselect $moveCtrlSel[0] $softSel[0] $wordSpaceLocSel[0];\ngroup -n \"SoftSelRig1\";\nstring $groupSel[] = `ls -sl`;\nsetAttr -l 1 ($groupSel[0] + \".t\");\nsetAttr -l 1 ($groupSel[0] + \".r\");\nsetAttr -l 1 ($groupSel[0] + \".s\");\n\nrename $moveCtrlSel[0] \"move_ctrl1\";\nrename $adjustCtrlSel[0] \"adjust_ctrl1\";\nrename $wordSpaceLocSel[0] \"world_space_locator1\";\n\nif ( $softModCheck == 1 ){\n    optionVar -iv softModToolMode 1;\n}")
	da_SoftSelectionRig;

runTimeCommand
	-annotation "Open the new UV Toolkit"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(isUVToolkitReady())\n    workspaceControl -e -collapse false UVToolkitDockControl;\nelse\n    da_ToggleUvToolkit")
	da_OpenUvToolkit;

runTimeCommand
	-annotation "Toggle UV Toolkit"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -r UVToolkitDockControl`){\n    if(!`isChannelBoxVisible`){\n        setChannelBoxVisible(1);\n    }else{\n        raiseChannelBox;\n    }\n    }else{\n        da_OpenUvToolkit;\n    }")
	da_ToggleUvToolkit;

runTimeCommand
	-annotation "Toggle Modeling Toolkit"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -r NEXDockControl`){\n    if(!`isChannelBoxVisible`){\n        setChannelBoxVisible(1);\n    }else{\n        raiseChannelBox;\n    }\n    }else{\n        da_ModelingToolkit;\n    }")
	da_ToggleModelingTool;

runTimeCommand
	-annotation "Mirror Cut on X Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 1 1 0.001;\nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutX;

runTimeCommand
	-annotation "Mirror Cut on Y Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 2 1 0.001;\nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutY;

runTimeCommand
	-annotation "Mirror Cut on X Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutZ;

runTimeCommand
	-annotation "Mirror Cut on Negative X Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $mirrorCutMirrors[] = `ls -sl`; \nsetAttr ($mirrorCutMirrors[0] + \".rotateY\") -90; \nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutXNeg;

runTimeCommand
	-annotation "Mirror Cut on Negative Y Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $mirrorCutMirrors[] = `ls -sl`; \nsetAttr ($mirrorCutMirrors[0] + \".rotateX\") 90; \nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutYNeg;

runTimeCommand
	-annotation "Mirror Cut on Negative Z Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $mirrorCutMirrors[] = `ls -sl`; \nsetAttr ($mirrorCutMirrors[0] + \".rotateY\") -180; \nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutZNeg;

runTimeCommand
	-annotation "Boolean Full Intersect"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myBackup[] = `ls -sl`;\n    duplicate;\n    string $mySel[] = `ls -sl`;\n    duplicate;\n    string $myDuplicateSel[] = `ls -sl`;\n    select $mySel;\n    polyCBoolOp -op 2 -ch 1 -preserveColor 0 -classification 1;\n    delete -ch;\n    CenterPivot;\n    string $firstBool[] = `ls -sl`;\n    select $myDuplicateSel;\n    polyCBoolOp -op 3 -ch 1 -preserveColor 0 -classification 1;\n    delete -ch;\n    CenterPivot;\n    string $secondBool[] = `ls -sl`;\n    select -clear;\n    select $myBackup;\n    Group;\n    rename \"intersectBackup1\";\n    hide;\n    select $firstBool;\n    select -add $secondBool;\n    string $boolPiece[] = `ls -sl`;\n    for($x=0;$x<size($boolPiece);$x++)\n        rename $boolPiece[$x] (\"boolPiece1\");\n}\nelse{\n    string $myResult = `confirmDialog -title \"Confirm\" -message \"Only the first selected object can have multiple intersections, continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n        string $myBackup[] = `ls -sl`;\n        duplicate;\n        string $mySel[] = `ls -sl`;\n        duplicate;\n        string $myDuplicateSel[] = `ls -sl`;\n        select $mySel;\n        polyCBoolOp -op 2 -ch 1 -preserveColor 0 -classification 1;\n        delete -ch;\n        CenterPivot;\n        string $firstBool[] = `ls -sl`;\n        select $myDuplicateSel;\n        polyCBoolOp -op 3 -ch 1 -preserveColor 0 -classification 1;\n        CenterPivot;\n        string $secondBool[] = `ls -sl`;\n        select -clear;\n        select $secondBool;\n        performPolyShellSeparate;\n        delete -ch;\n        string $secondBool[] = `ls -sl`;\n        CenterPivot;\n        pickWalk -d up;\n        string $tempGRP[] = `ls -sl`;\n        select $secondBool;\n        Unparent;\n        select $tempGRP;\n        delete;\n        select $myBackup;\n        Group;\n        rename \"intersectBackup1\";\n        hide;\n        select $firstBool;\n        select -add $secondBool;\n        string $boolPiece[] = `ls -sl`;\n        for($x=0;$x<size($boolPiece);$x++)\n            rename $boolPiece[$x] (\"boolPiece1\");\n\t}\n}")
	da_BooleanFullIntersect;

runTimeCommand
	-annotation "Cut a Mesh by Using a Poly Plane"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myResult = `confirmDialog -title \"Select the Plane Cut operation\" -message \"Please check if you have select first the geometry then the cut plane. Did you want single o double cut plane?\" \n\t-button \"Single\" -button \"Double\" -button \"Cancel\" -cancelButton \"Cancel\" -defaultButton \"Cancel\"`;\n\tif ($myResult == \"Single\") {\n        string $myBakup[] = `ls -sl`;\n        duplicate;\n        string $mySel[] = `ls -sl`;\n        select $myBakup;\n        Group;\n        rename \"singlePlaneBackup1\";\n        string $myBakupGRP[] = `ls -sl`;\n        select $mySel;\n        Group;\n        rename \"singlePlaneCut1\";\n        select $mySel[0];\n        duplicate;\n        string $myDuplicateSel[] = `ls -sl`;\n        select $mySel;\n        PolygonBooleanDifference;\n        string $firstCut[] = `ls -sl`;\n        da_wireframeTemplateA;\n        select $mySel[1];\n        pickWalk -d down;\n        string $mySelShape[] = `listRelatives -s`;\n        select -add $myDuplicateSel;\n        PolygonBooleanIntersection;\n        string $secondtCut[] = `ls -sl`;\n        da_wireframeTemplateB;\n        select $myBakup[1];\n        string $myBakupShape[] = `listRelatives -s`;\n        connectAttr -f ($myBakupShape[0] + \".outMesh\") ($mySelShape[0] + \".inMesh\");\n\n\t\tstring $myCutPlane[] = `listRelatives -p $mySelShape`;\n\t\tselect $myCutPlane;\n\t\tda_ResetTweakPoint;\n\n        select $myBakupGRP;\n        hide;\n        select $firstCut;\n        select -add $secondtCut;\n        string $cutPiece[] = `ls -sl`;\n        for($x=0;$x<size($cutPiece);$x++)\n            rename $cutPiece[$x] (\"cutPiece1\");\n        select -clear;\n    }\n    if ($myResult == \"Double\") {\n        string $myBakup[] = `ls -sl`;\n        duplicate;\n        string $mySel[] = `ls -sl`;\n        select $myBakup;\n        Group;\n        rename \"doublePlaneBackup1\";\n        string $myBakupGRP[] = `ls -sl`;\n        select $mySel;\n        Group;\n        rename \"doublePlaneCut1\";\n        select $mySel;\n        duplicate;\n        string $myDuplicateSel[] = `ls -sl`;\n        select $mySel;\n        PolygonBooleanDifference;\n        string $firstCut[] = `ls -sl`;\n        da_wireframeTemplateA;\n        select $myDuplicateSel;\n        PolygonBooleanIntersection;\n        string $secondtCut[] = `ls -sl`;\n        da_wireframeTemplateA;\n        select $mySel[1];\n        pickWalk -d down;\n        string $mySelShape[] = `listRelatives -s`;\n        select $myDuplicateSel[1];\n        pickWalk -d down;\n        string $myDuplicateSellShape[] = `listRelatives -s`;\n        select $myBakup[1];\n        string $myBakupShape[] = `listRelatives -s`;\n        connectAttr -f ($myBakupShape[0] + \".outMesh\") ($mySelShape[0] + \".inMesh\");\n        connectAttr -f ($myBakupShape[0] + \".outMesh\") ($myDuplicateSellShape[0] + \".inMesh\");\n\n\t\tstring $myCutPlane[] = `listRelatives -p $mySelShape`;\n\t\tstring $myDuplicateCutPlane[] = `listRelatives -p $myDuplicateSellShape`;\n\t\tselect $myCutPlane;\n\t\tselect -add $myDuplicateCutPlane;\n\t\tda_ResetTweakPoint;\n\n        select $myBakupGRP;\n        hide;\n        select $firstCut;\n        select -add $secondtCut;\n        string $cutPiece[] = `ls -sl`;\n        for($x=0;$x<size($cutPiece);$x++)\n            rename $cutPiece[$x] (\"cutPiece1\");\n        select -clear;\n    }\n}else{\n    string $myResult = `confirmDialog -title \"Warning\" -message \"Please select only two meshes, first the geometry then the cut plane and retry.\" \n\t-button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;\n}")
	da_PlaneCutter;

runTimeCommand
	-annotation "Convert NURBS to Mesh"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $mySelShape[] = `listRelatives -s`;\nfor ($each in $mySel)\n    nurbsToPoly -mnd 1  -ch 1 -f 3 -pt 1 -pc 200 -chr 0.9 -ft 0.01 -mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $each;\nselect $mySelShape;\nstring $myTassellate[] = `listConnections -type \"nurbsTessellate\"`;\nselect $myTassellate;\nstring $myPolyShape[] = `listConnections -type \"mesh\"`;\nselect $myPolyShape;\nsetDisplaySmoothness 3;\nselect $mySel;\nhide;")
	da_NurbsToMesh;

runTimeCommand
	-annotation "Add Custom Fluid Kill Field"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("FluidEmitter;\nstring $mySel[] = `ls -sl`;\napplyPresetToNode $mySel[0] \"\" \"\" \"da_KillVolume\" 1;")
	da_FluidKillField;

runTimeCommand
	-annotation "Enable Fluid Auto Resize"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".autoResize\") 1;\n}\ninViewMessage -pos topCenter -msg \"Fluid Auto Resize Enable\" -fade;")
	da_FluidAutoResizeOn;

runTimeCommand
	-annotation "Disable Fluid Auto Resize"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".autoResize\") 0;\n}\ninViewMessage -pos topCenter -msg \"Fluid Auto Resize Disable\" -fade;")
	da_FluidAutoResizeOff;

runTimeCommand
	-annotation "Connect Nurbs Create Node to Shape"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n\tconnectAttr -f ($createConnect[0] + \".outputSurface\") ($createConnect[$i] + \".create\");\n}")
	da_NurbsConnectCreation;

runTimeCommand
	-annotation "Connect Curve Create Node to Shape"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n\tconnectAttr -f ($createConnect[0] + \".outputCurve\") ($createConnect[$i] + \".create\");\n}")
	da_CurveConnectCreation;

runTimeCommand
	-annotation "Connect Nurbs Shapes"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n    connectAttr -f ($createConnect[0] + \".worldSpace\") ($createConnect[$i] + \".create\");\n}")
	da_ConnectNurbsShapes;

runTimeCommand
	-annotation "Toggle Channel Box"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis ChannelBoxLayerEditor` == 1){\n    if(`workspaceControl -q -r ChannelBoxLayerEditor` == 0)\n    workspaceControl -e -clp 0 ChannelBoxLayerEditor;\n    else\n        if(`workspaceControl -q -clp ChannelBoxLayerEditor` == 0)\n            workspaceControl -e -clp 1 ChannelBoxLayerEditor;\n        else\n            workspaceControl -e -clp 0 ChannelBoxLayerEditor;\n}else{\n    setChannelsLayersVisible(true); raiseChannelsLayers;\n}")
	da_ToggleChannelLayer;

runTimeCommand
	-annotation "Toggle Modeling Tool Kit"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis NEXDockControl` == 1){\n    if(`workspaceControl -q -r NEXDockControl` == 0)\n    workspaceControl -e -clp 0 NEXDockControl;\n    else\n        if(`workspaceControl -q -clp NEXDockControl` == 0)\n            workspaceControl -e -clp 1 NEXDockControl;\n        else\n            workspaceControl -e -clp 0 NEXDockControl;\n}else{\n    showModelingToolkit;\n}")
	da_ToggleMTK;

runTimeCommand
	-annotation "UV Toolkit"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis UVToolkitDockControl` == 1){\n    if(`workspaceControl -q -r UVToolkitDockControl` == 0)\n    workspaceControl -e -clp 0 UVToolkitDockControl;\n    else\n        if(`workspaceControl -q -clp UVToolkitDockControl` == 0)\n            workspaceControl -e -clp 1 UVToolkitDockControl;\n        else\n            workspaceControl -e -clp 0 UVToolkitDockControl;\n}else{\n    da_OpenUvToolkit;\n}")
	da_UvToolkit;

runTimeCommand
	-annotation "Toggle Attribute Editor"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis AttributeEditor` == 1){\n    if(`workspaceControl -q -r AttributeEditor` == 0)\n    workspaceControl -e -clp 0 AttributeEditor;\n    else\n        if(`workspaceControl -q -clp AttributeEditor` == 0)\n            workspaceControl -e -clp 1 AttributeEditor;\n        else\n            workspaceControl -e -clp 0 AttributeEditor;\n}else{\n    AttributeEditor;\n}")
	da_ToggleAttribute;

runTimeCommand
	-annotation "Toggle Outline"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis Outliner` == 1){\n    if(`workspaceControl -q -r Outliner` == 0)\n    workspaceControl -e -clp 0 Outliner;\n    else\n        if(`workspaceControl -q -clp Outliner` == 0)\n            workspaceControl -e -clp 1 Outliner;\n        else\n            workspaceControl -e -clp 0 Outliner;   \n}else{\n    OutlinerWindow;\n}")
	da_ToggleOutline;

runTimeCommand
	-annotation "Toggle Tool Settings"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis da_ToolSettings` == 1){\n    if(`workspaceControl -q -r da_ToolSettings` == 0)\n    workspaceControl -e -clp 0 da_ToolSettings;\n    else\n        if(`workspaceControl -q -clp da_ToolSettings` == 0)\n            workspaceControl -e -clp 1 da_ToolSettings;\n        else\n            workspaceControl -e -clp 0 da_ToolSettings;   \n}else{\n    ToolSettingsWindow;\n}")
	da_ToggleToolSetting;

runTimeCommand
	-annotation "Disable Slide on Selected Constraint"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".connectionUpdate\") 0;\nsetAttr ($each +\".strength\") 20;\nsetAttr ($each +\".tangentStrength\") 10;\nsetAttr ($each +\".friction\") 0;\nsetAttr ($each +\".localCollide\") 0;\n}\ninViewMessage -pos topCenter -msg \"Disable Slide on Selected Constraint\" -fade;")
	da_SlideConstraintOff;

runTimeCommand
	-annotation "Enable Slide on Selected Constraint"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".connectionUpdate\") 1;\nsetAttr ($each +\".strength\") 0.02;\nsetAttr ($each +\".tangentStrength\") 0.2;\nsetAttr ($each +\".friction\") 0.1;\nsetAttr ($each +\".localCollide\") 1;\n}\ninViewMessage -pos topCenter -msg \"Enable Slide on Selected Constraint\" -fade;")
	da_SlideConstraintOn;

runTimeCommand
	-annotation "Enable Hair Self Collision"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 1;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".selfCollide\") 1;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 1;\n    select $mySel;\n}")
	da_nHairSelfCollideOn;

runTimeCommand
	-annotation "Disable nHair Self Collision"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 0;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".selfCollide\") 0;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 0;\n    select $mySel;\n}")
	da_nHairSelfCollideOff;

runTimeCommand
	-annotation "Disable nHair Collision"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 0;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".collide\") 0;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 0;\n    select $mySel;\n}")
	da_nHairColllideOff;

runTimeCommand
	-annotation "Enable nHair Collision"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 1;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".collide\") 1;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 1;\n    select $mySel;\n}")
	da_nHairCollideOn;

runTimeCommand
	-annotation "Set nHair Point Lock to Tip"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}")
	da_nHairLockTip;

runTimeCommand
	-annotation "Toggle Attribuite Editor Channel Box"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if(`workspaceControl -q -vis AttributeEditor` == 1){\n    if(`workspaceControl -q -r AttributeEditor` == 0)\n    workspaceControl -e -clp 0 AttributeEditor;\n    else\n        if(`workspaceControl -q -clp AttributeEditor` == 0)\n            ShowAttributeEditorOrChannelBox;\n        else\n            workspaceControl -e -clp 0 AttributeEditor;\n}else{\n    AttributeEditor;\n}")
	da_ToggleAttribuiteChannel;

runTimeCommand
	-annotation "Batch Skin Transfert by UV"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation closestPoint -uvSpace map1 map1 -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertUV;

runTimeCommand
	-annotation "Batch Skin Transfert by Closest Point"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertCP;

runTimeCommand
	-annotation "Batch Skin Transfert by Ray Cast"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation rayCast -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertRC;

runTimeCommand
	-annotation "Batch Skin Transfert by Closest Component"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation closestComponent -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertCC;

runTimeCommand
	-annotation "Enable Poly Shade"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`; \nfor ($each in $mySel){\n    setAttr ($each + \".primaryVisibility\") 1;\n    setAttr ($each + \".overrideEnabled\") 0;\n    setAttr ($each + \".overrideShading\") 1;\n    setAttr ($each + \".castsShadows\") 1;\n    setAttr ($each + \".receiveShadows\") 1;\n    setAttr ($each + \".motionBlur\") 1;\n    setAttr ($each + \".smoothShading\") 1;\n    setAttr ($each + \".visibleInReflections\") 1;\n    setAttr ($each + \".visibleInRefractions\") 1;\n}")
	da_PolyShade;

runTimeCommand
	-annotation "Disable Poly Shade"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`; \nfor ($each in $mySel){\n    setAttr ($each + \".primaryVisibility\") 0;\n    setAttr ($each + \".overrideEnabled\") 1;\n    setAttr ($each + \".overrideShading\") 0;\n    setAttr ($each + \".castsShadows\") 0;\n    setAttr ($each + \".receiveShadows\") 0;\n    setAttr ($each + \".motionBlur\") 0;\n    setAttr ($each + \".smoothShading\") 0;\n    setAttr ($each + \".visibleInReflections\") 0;\n    setAttr ($each + \".visibleInRefractions\") 0;\n}")
	da_PolyNoShade;

runTimeCommand
	-annotation "Toggle UV Borders Based on Panel"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("int $borders[] = `polyOptions -q -displayMapBorder`;\nfloat $borderWidth[] = `optionVar -q displayPolyBorderEdgeSize`;\npolyOptions -displayMapBorder (!$borders[0]) -sizeBorder $borderWidth[1];")
	da_ToggleUVBorders;

runTimeCommand
	-annotation "Toggle resolution gate"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $currPanel = `getPanel -up`;\nstring $currCam = `modelEditor -q -cam $currPanel`;\nstring $ResolutionGateState = `camera -q -dr $currCam`;\n\nif ($ResolutionGateState == 0)\n    camera -e -dr on -ovr 1.3 $currCam;\nelse\n    camera -e -dr off -ovr 1.0 $currCam;")
	da_ToggleResolutionGate;

runTimeCommand
	-annotation "Camera Bookmark"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $panel = `getPanel -wf`;\n$camera = `modelEditor -q -camera $panel`;\ncameraBookmarkEditor $camera;")
	da_CameraBookmark;

runTimeCommand
	-annotation "Create Rivet by MASH"
	-category "Custom Scripts.May9_Pro.MASH"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $faceSel[] = `filterExpand -sm 34`;\nstring $polySel[] = `filterExpand -sm 12`;\n\nif (size($polySel) == 1){\n    select $faceSel;\n    dR_modeObject;\n    string $myMesh[] = `listRelatives -s`;\n    \n    select $faceSel;\n    $myRivetSet = `sets -name \"rivetSet1\"`;\n    select $polySel;\n\tda_ZeroTransfomations;\n    $myMash = `MASHnewNetwork(\"MASH#\")`;\n    string $myMashDistribute[] = `listConnections -s 1 -d 0 -t \"MASH_Distribute\"`;\n    \n    connectAttr -f ($myRivetSet + \".message\") ($myMashDistribute[0] + \".selectionSetMessage\");\n    connectAttr -f ($myMesh[0] + \".worldMesh\") ($myMashDistribute[0] + \".inputMesh\");\n    \n    setAttr ($myMashDistribute[0] + \".arrangement\") 4;\n    setAttr ($myMashDistribute[0] + \".meshType\") 7;\n    setAttr ($myMashDistribute[0] + \".floodMesh\") 1;\n    setAttr ($myMashDistribute[0] + \".useUpVector\") 1;\n    \n    select $myMashDistribute[0];\n    openAEWindow;\n}else{\n    inViewMessage -pos topCenter -msg \"Only one mesh is allowed\" -fade;\n}")
	da_RivetMash;

runTimeCommand
	-annotation "Add Image Plane on Curent Camera"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $camera;\nstring $panel = `getPanel -wf`;\nif ( \"modelPanel\" == `getPanel -to $panel` )\n  {\n    $camera = `modelEditor -q -camera $panel`;\n  }\nstring $myCameraShape[] = `listRelatives -s`;\nimportImagePlane { $myCameraShape[0] };")
	da_ImagePlane;

runTimeCommand
	-annotation "Add Video Plane on Curent Camera"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $camera;\nstring $panel = `getPanel -wf`;\nif ( \"modelPanel\" == `getPanel -to $panel` )\n  {\n    $camera = `modelEditor -q -camera $panel`;\n  }\nstring $myCameraShape[] = `listRelatives -s`;\nimportMovieImagePlane { $myCameraShape[0] };")
	da_VideoPlane;

runTimeCommand
	-annotation "Reset Position and Orientation of Pivot"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $objs[] = `ls -sl -type transform -type geometryShape`;\nif (size($objs) > 0) {\n\txform -cp;\n}\nmanipPivot -rp -ro; ")
	da_ResetPivot;

runTimeCommand
	-annotation "Enable Medium Precision for Nucleus"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\nsetAttr ($each +\".subSteps\") 18;\nsetAttr ($each +\".maxCollisionIterations\") 4;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Medium Precision Enable\" -fade;")
	da_NucleusMedium;

runTimeCommand
	-annotation "Force Nucleus in Parallel Mode"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("evaluator -en off -name dynamics -c \"disablingNodes=unsupported\";\nevaluator -en off -name dynamics -c \"handledNodes=dynamics\";\nevaluator -en off -name dynamics -c \"action=evaluate\";\ninViewMessage -pos topCenter -msg \"Nucleus Override ON, this Disable Maya Fluids\" -fade;\n")
	da_NucleusParallelOn;

runTimeCommand
	-annotation "Disable Nucleus in Parallel Mode"
	-category "Custom Scripts.May9_Pro.Dynamics"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("evaluator -en on -name dynamics -c \"disablingNodes=legacy2016\";\nevaluator -en on -name dynamics -c \"handledNodes=none\";\nevaluator -en on -name dynamics -c \"action=none\";\ninViewMessage -pos topCenter -msg \"Nucleus Override OFF\" -fade;")
	da_NucleusParallelOff;

runTimeCommand
	-annotation "Distribuite a geomentry on curve"
	-category "Custom Scripts.May9_Pro.MASH"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $curveSel[] = `filterExpand -sm 9`;\nstring $polySel[] = `filterExpand -sm 12`;\n\nselect $polySel[0];\n$myMash = `MASHnewNetwork(\"MASH#\")`;\nstring $myMashDistribute[] = `listConnections -s 1 -d 0 -t \"MASH_Distribute\"`;\nsetAttr ($myMashDistribute[0] + \".amplitudeX\") 0;\n\n$myMashCurve = `createNode MASH_Curve`;\nconnectAttr -f ($myMashCurve + \".outputPoints\") ($myMash[0] + \".inputPoints\");\n\nselect $curveSel[0];\nstring $curveSelShape[] = `listRelatives -s`;\n\nconnectAttr -f ($curveSelShape[0] + \".worldSpace[0]\") ($myMashCurve + \".inCurves[0]\");\nconnectAttr -f ($myMashDistribute[0] + \".outputPoints\") ($myMashCurve + \".inputPoints\");\n\nsetAttr ($myMashCurve + \".timeSlide\") 0;\nsetAttr ($myMashCurve + \".parametricLength\") 1;\n\nselect $myMashDistribute[0];\nAttributeEditor;")
	da_CurveDistributionMash;

runTimeCommand
	-annotation "Layout Single Perspective/Four View"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setNamedPanelLayout \"daFourView\";\nstring $perspPanel = `getPanel -wl \"Persp View\"`;\ndoSwitchPanes(1, {\"single\", $perspPanel});\ninViewMessage -pos topCenter -msg \"Perspective/Four View layout\" -fade;")
	da_LayoutPersp;

runTimeCommand
	-annotation "Layout Node Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daNodeEditor\";\ninViewMessage -pos topCenter -msg \"Node Editor layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutNodeEditor;

runTimeCommand
	-annotation "Layout UV TextureEditor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daUvEditor\";\n//Hide Texture\nstring $visiblePanels[] = `getPanel -visiblePanels`;\nif(stringArrayContains(\"polyTexturePlacementPanel1\", $visiblePanels)){\n  string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;\n  textureWindowToggleTextureImageOff( $texWinName[0], \"textureWindow\" );\n  txtWndUpdateEditor( $texWinName[0], \"textureWindow\", \"null\", 101 );\n}\n\ninViewMessage -pos topCenter -msg \"UV Texture layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutUvTextureEditor;

runTimeCommand
	-annotation "Layout Graph Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daGraphEditor\";\ninViewMessage -pos topCenter -msg \"Graph Editor\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutGraphEditor;

runTimeCommand
	-annotation "Layout Shape Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daShapeEditor\";\ninViewMessage -pos topCenter -msg \"Shape layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutShapeEditor;

runTimeCommand
	-annotation "Layout Pose Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daPoseEditor\";\ninViewMessage -pos topCenter -msg \"Pose layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutPoseEditor;

runTimeCommand
	-annotation "Layout Component Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daComponentEditor\";\ninViewMessage -pos topCenter -msg \"Component layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutComponentEditor;

runTimeCommand
	-annotation "Layout Relationship Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daRelationshipEditor\";\ninViewMessage -pos topCenter -msg \"Relationship layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutRelationshipEditor;

runTimeCommand
	-annotation "Layout Dynamic Relationship Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daDynamicRelationshipEditor\";\ninViewMessage -pos topCenter -msg \"Dynamic Relationship layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutDynamicRelationshipEditor;

runTimeCommand
	-annotation "Layout Reference Editor"
	-category "Custom Scripts.May9_Pro.Layout"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("//Get Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nstring $curCam = `modelPanel -q -cam $curPane`;\n//Change Layout\nsetNamedPanelLayout \"daReferenceEditor\";\ninViewMessage -pos topCenter -msg \"Reference layout\" -fade;\n//Switch back to Current Camera\nstring $curPanel = `playblast -ae`;\nstring $curPane = `match \"[^|]*$\" $curPanel`;\nlookThru $curPane $curCam;")
	da_LayoutReferenceEditor;

runTimeCommand
	-annotation "Enable Opaque for Selected Meshes"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiOpaque\") 1;\n    \ninViewMessage -pos topCenter -msg \"Opaque On\" -fade;")
	da_AiOpaque;

runTimeCommand
	-annotation "Enable Opaque for Selected Meshes"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiOpaque\") 0;\n    \ninViewMessage -pos topCenter -msg \"Opaque Off\" -fade;")
	da_AiNoOpaque;

runTimeCommand
	-annotation "Close All Opened Panel"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("updateWorkspacesList;\nworkspaceLayoutManager -reset;\nsetNamedPanelLayout \"Single Perspective View\";\ninViewMessage -pos topCenter -msg \"May9 Pro Workspace Resetted\" -fade;")
	da_CloseAllPanel;

runTimeCommand
	-annotation "MASH Blend Deformer"
	-category "Custom Scripts.May9_Pro.MASH"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nselect $mySel[0];\nMASHaddBlendDeformer;\nstring $myBlendDeformer[] = `listConnections -s 1 -d 0 -t \"MASH_BlendDeformer\"`;\nconnectAttr -f ($mySel[1] + \".worldMesh\") ($myBlendDeformer[0] + \".blendMesh\");\nselect $myBlendDeformer;")
	da_MashBlendDeformer;

runTimeCommand
	-annotation "About May9 Pro Window"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myResult = `confirmDialog -title \"About\" -message (\"Davide Alidosi's \" +$may9Version +\"       \") \n    -button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;")
	da_AboutMay9;

runTimeCommand
	-annotation "Convert Edge to Curve in UV Editor"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl -o`;\nCreateCurveFromPoly;\nselect $mySel[0];\nsetSelectMode components Components; selectType -smp 0 -sme 1 -smf 0 -smu 0 -pv 0 -pe 1 -pf 0 -puv 0")
	da_ConvertUvEdgeToCurve;

runTimeCommand
	-annotation "Select Edge Ring and Loop"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("SelectEdgeRingSp;\nSelectEdgeLoopSp")
	da_EdgeRingAndLoop;

runTimeCommand
	-annotation "Convert Edges to Loops and to Curves"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myResult = `confirmDialog -title \"To Loops to Curves\" -message \"Before continue make sure to have seleted only one edge for loop. Continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n        string $edgeSel[] = `ls -sl -fl`;\n        \n        for ($i=0; $i<`size$edgeSel`; $i++)\n        {\n        \tselect $edgeSel[$i];\n        \tpolySelectConstraint -pp 4 -m2a 30 -m3a 90;\n        \tpolyToCurve -form 2 -degree 3;\n        }\n}")
	da_EdgeToLoopToCurve;

runTimeCommand
	-annotation "Select Current Component Shader"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("hyperShade -smn;\nda_SelectObjectMaterial")
	da_SelectComponentShader;

runTimeCommand
	-annotation "Edit and Frame Shaders Based on Current Selection"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("da_LayoutNodeEditor;\nda_SelectAssignedShader;\nNodeEditorGraphUpDownstream;\n\ninViewMessage -pos topCenter -msg \"Edit Shaders\" -fade")
	da_EditAndFrameShaders;

runTimeCommand
	-annotation "Create or Assig Node to a Selection"
	-category "Custom Scripts.May9_Pro.Object"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("catchQuiet (`AssignNewMaterial`);\nif (`window -q -ex \"assignNewMaterialWindow\"` == 0 || `window -q -vis \"assignNewMaterialWindow\"` == 0)\n    createNodeWindow;")
	da_CreateAssigNode;

runTimeCommand
	-annotation "Unlock Selected Node(s)"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($allMySel in $mySel) \n{\n\tda_LockNode -lock off $allMySel;\n}")
	da_UnLockNode;

runTimeCommand
	-annotation "Lock Selected Node(s)"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nfor ($allMySel in $mySel) \n{\n\tda_LockNode -lock on $allMySel;\n}")
	da_LockNode;

runTimeCommand
	-annotation "Edit And Frame Shader from Outliner"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("da_LayoutNodeEditor;\nAttributeEditor;\nNodeEditorGraphUpDownstream;\n\ninViewMessage -pos topCenter -msg \"Edit Shaders\" -fade")
	da_EditAndFrameShaderOutliner;

runTimeCommand
	-annotation "Unlock and Fix Normals"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("polyNormalPerVertex -ufn true;\npolySoftEdge -angle 47")
	da_UnlockAndFixNormals;

runTimeCommand
	-annotation "Assign aiStandardHair to pfxHair"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `listRelatives -s`;\nselect $mySel[0];\nstring $myHairSystem[] = `listConnections -s 1 -d 0 -t \"hairSystem\"`;\n\n//string $myHairSystem[] = `ls -sl`;\ncreateRenderNodeCB -asShader \"surfaceShader\" aiStandardHair \"\";\nstring $myStandardHair[] = `ls -sl`;\n\nconnectAttr ($myStandardHair[0] + \".outColor\", $myHairSystem[0] + \".aiHairShader\");\n\nsetAttr ($myHairSystem[0] + \".aiOverrideHair\") 1;\n\nopenAEWindow")
	da_AiStandardHairToPfxHair;

runTimeCommand
	-annotation "Toggle Light Manipulators"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`renderManip -q -st` == 0)\n    ShowLightManipulators;\nelse\n    HideLightManipulators;")
	da_ToggleLightManipulators;

runTimeCommand
	-annotation "Toggle Camera Manipulators"
	-category "Custom Scripts.May9_Pro.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`renderManip -q -st` == 0)\n    ShowCameraManipulators;\nelse\n    HideCameraManipulators;")
	da_ToggleCameraManipulators;

runTimeCommand
	-annotation "Insert Keyframe On the Line Graph"
	-category "Custom Scripts.May9_Pro.Animate"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setKeyframe -insert")
	da_InsertKeyFrame;

runTimeCommand
	-annotation "Auto Bevel Mesh"
	-category "Custom Scripts.May9_Pro.Modeling"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`;\nstring $mySelShape[] = `listRelatives -s`;\nselect -cl;\n\nfor ($i=0; $i<`size$mySelShape`; $i++){\n    //Cycle mesh selection\n    select $mySelShape[$i];\n    //Select edge by angle\n    polySelectConstraint -m 3 -t 0x8000 -a on -ab 40 140;\n    string $bevelAngleSel[] = `ls -sl`;\n    polySelectConstraint -a off;\n    select $bevelAngleSel;\n    //Bevel edge selection\n\tpolyBevel3 -f 0.05 -oaf 1 -af 1 -d 1 -m 0 -mia 0 -c 1 -sg 2 -ws 1 -sa 47 -sn 1 -mv 1 -mvt 0.0001 -ma 180 -at 180 -ch 1;\n}\n\nselect $mySel;\nsetToolTo ShowManips;")
	Da_AutoBevel;

runTimeCommand
	-annotation "Copy Camera Position"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$curPanel = `getPanel -wf`;\n$curCam = `modelPanel -q -cam $curPanel`;\n\n$curCamTX = `getAttr ($curCam +\".tx\")`;\n$curCamTY = `getAttr ($curCam +\".ty\")`;\n$curCamTZ = `getAttr ($curCam +\".ty\")`;\n$curCamRX = `getAttr ($curCam +\".rx\")`;\n$curCamRY = `getAttr ($curCam +\".ry\")`;\n$curCamRZ = `getAttr ($curCam +\".rz\")`;")
	da_CopyCameraPosition;

runTimeCommand
	-annotation "Paste Camera Position"
	-category "Custom Scripts.May9_Pro.Scene"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("$curPanel = `getPanel -wf`;\n$curCam = `modelPanel -q -cam $curPanel`;\n\nsetAttr ($curCam +\".tx\") $curCamTX;\nsetAttr ($curCam +\".ty\") $curCamTY;\nsetAttr ($curCam +\".tz\") $curCamTZ;\nsetAttr ($curCam +\".rx\") $curCamRX;\nsetAttr ($curCam +\".ry\") $curCamRY;\nsetAttr ($curCam +\".rz\") $curCamRZ;")
	da_PasteCameraPosition;

runTimeCommand
	-annotation "Select Influenced Vertex by Joint"
	-category "Custom Scripts.May9_Pro.Rigging"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myJoint[] = `ls -sl`;\nstring $mySkinCluster[] = `listConnections -s 0 -d 1 -t \"skinCluster\"`;\nskinCluster -e -selectInfluenceVerts $myJoint[0] $mySkinCluster[0]")
	da_SelectVertexJoint;

runTimeCommand
	-annotation "Make Mesh Light Visible"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".lightVisible\") 1;\n\ninViewMessage -pos topCenter -msg \"Light Visible On\" -fade;")
	da_MeshLightVisible;

runTimeCommand
	-annotation "Make Mesh Light Invisible"
	-category "Custom Scripts.May9_Pro.Render"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".lightVisible\") 0;\n\ninViewMessage -pos topCenter -msg \"Light Visible Off\" -fade;")
	da_MeshLightNoVisible;
